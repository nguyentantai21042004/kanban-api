// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// MigrationProgress is an object representing the database table.
type MigrationProgress struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	TableName         string      `boil:"table_name" json:"table_name" toml:"table_name" yaml:"table_name"`
	TargetType        string      `boil:"target_type" json:"target_type" toml:"target_type" yaml:"target_type"`
	TotalRecords      int64       `boil:"total_records" json:"total_records" toml:"total_records" yaml:"total_records"`
	MigratedRecords   null.Int64  `boil:"migrated_records" json:"migrated_records,omitempty" toml:"migrated_records" yaml:"migrated_records,omitempty"`
	FailedRecords     null.Int64  `boil:"failed_records" json:"failed_records,omitempty" toml:"failed_records" yaml:"failed_records,omitempty"`
	StartedAt         null.Time   `boil:"started_at" json:"started_at,omitempty" toml:"started_at" yaml:"started_at,omitempty"`
	CompletedAt       null.Time   `boil:"completed_at" json:"completed_at,omitempty" toml:"completed_at" yaml:"completed_at,omitempty"`
	LastUpdatedAt     null.Time   `boil:"last_updated_at" json:"last_updated_at,omitempty" toml:"last_updated_at" yaml:"last_updated_at,omitempty"`
	Status            null.String `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	ErrorDetails      null.JSON   `boil:"error_details" json:"error_details,omitempty" toml:"error_details" yaml:"error_details,omitempty"`
	MigrationStrategy null.String `boil:"migration_strategy" json:"migration_strategy,omitempty" toml:"migration_strategy" yaml:"migration_strategy,omitempty"`
	CreatedAt         null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *migrationProgressR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L migrationProgressL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MigrationProgressColumns = struct {
	ID                string
	TableName         string
	TargetType        string
	TotalRecords      string
	MigratedRecords   string
	FailedRecords     string
	StartedAt         string
	CompletedAt       string
	LastUpdatedAt     string
	Status            string
	ErrorDetails      string
	MigrationStrategy string
	CreatedAt         string
}{
	ID:                "id",
	TableName:         "table_name",
	TargetType:        "target_type",
	TotalRecords:      "total_records",
	MigratedRecords:   "migrated_records",
	FailedRecords:     "failed_records",
	StartedAt:         "started_at",
	CompletedAt:       "completed_at",
	LastUpdatedAt:     "last_updated_at",
	Status:            "status",
	ErrorDetails:      "error_details",
	MigrationStrategy: "migration_strategy",
	CreatedAt:         "created_at",
}

var MigrationProgressTableColumns = struct {
	ID                string
	TableName         string
	TargetType        string
	TotalRecords      string
	MigratedRecords   string
	FailedRecords     string
	StartedAt         string
	CompletedAt       string
	LastUpdatedAt     string
	Status            string
	ErrorDetails      string
	MigrationStrategy string
	CreatedAt         string
}{
	ID:                "migration_progress.id",
	TableName:         "migration_progress.table_name",
	TargetType:        "migration_progress.target_type",
	TotalRecords:      "migration_progress.total_records",
	MigratedRecords:   "migration_progress.migrated_records",
	FailedRecords:     "migration_progress.failed_records",
	StartedAt:         "migration_progress.started_at",
	CompletedAt:       "migration_progress.completed_at",
	LastUpdatedAt:     "migration_progress.last_updated_at",
	Status:            "migration_progress.status",
	ErrorDetails:      "migration_progress.error_details",
	MigrationStrategy: "migration_progress.migration_strategy",
	CreatedAt:         "migration_progress.created_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MigrationProgressWhere = struct {
	ID                whereHelperstring
	TableName         whereHelperstring
	TargetType        whereHelperstring
	TotalRecords      whereHelperint64
	MigratedRecords   whereHelpernull_Int64
	FailedRecords     whereHelpernull_Int64
	StartedAt         whereHelpernull_Time
	CompletedAt       whereHelpernull_Time
	LastUpdatedAt     whereHelpernull_Time
	Status            whereHelpernull_String
	ErrorDetails      whereHelpernull_JSON
	MigrationStrategy whereHelpernull_String
	CreatedAt         whereHelpernull_Time
}{
	ID:                whereHelperstring{field: "\"migration_progress\".\"id\""},
	TableName:         whereHelperstring{field: "\"migration_progress\".\"table_name\""},
	TargetType:        whereHelperstring{field: "\"migration_progress\".\"target_type\""},
	TotalRecords:      whereHelperint64{field: "\"migration_progress\".\"total_records\""},
	MigratedRecords:   whereHelpernull_Int64{field: "\"migration_progress\".\"migrated_records\""},
	FailedRecords:     whereHelpernull_Int64{field: "\"migration_progress\".\"failed_records\""},
	StartedAt:         whereHelpernull_Time{field: "\"migration_progress\".\"started_at\""},
	CompletedAt:       whereHelpernull_Time{field: "\"migration_progress\".\"completed_at\""},
	LastUpdatedAt:     whereHelpernull_Time{field: "\"migration_progress\".\"last_updated_at\""},
	Status:            whereHelpernull_String{field: "\"migration_progress\".\"status\""},
	ErrorDetails:      whereHelpernull_JSON{field: "\"migration_progress\".\"error_details\""},
	MigrationStrategy: whereHelpernull_String{field: "\"migration_progress\".\"migration_strategy\""},
	CreatedAt:         whereHelpernull_Time{field: "\"migration_progress\".\"created_at\""},
}

// MigrationProgressRels is where relationship names are stored.
var MigrationProgressRels = struct {
}{}

// migrationProgressR is where relationships are stored.
type migrationProgressR struct {
}

// NewStruct creates a new relationship struct
func (*migrationProgressR) NewStruct() *migrationProgressR {
	return &migrationProgressR{}
}

// migrationProgressL is where Load methods for each relationship are stored.
type migrationProgressL struct{}

var (
	migrationProgressAllColumns            = []string{"id", "table_name", "target_type", "total_records", "migrated_records", "failed_records", "started_at", "completed_at", "last_updated_at", "status", "error_details", "migration_strategy", "created_at"}
	migrationProgressColumnsWithoutDefault = []string{"table_name", "target_type", "total_records"}
	migrationProgressColumnsWithDefault    = []string{"id", "migrated_records", "failed_records", "started_at", "completed_at", "last_updated_at", "status", "error_details", "migration_strategy", "created_at"}
	migrationProgressPrimaryKeyColumns     = []string{"id"}
	migrationProgressGeneratedColumns      = []string{}
)

type (
	// MigrationProgressSlice is an alias for a slice of pointers to MigrationProgress.
	// This should almost always be used instead of []MigrationProgress.
	MigrationProgressSlice []*MigrationProgress
	// MigrationProgressHook is the signature for custom MigrationProgress hook methods
	MigrationProgressHook func(context.Context, boil.ContextExecutor, *MigrationProgress) error

	migrationProgressQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	migrationProgressType                 = reflect.TypeOf(&MigrationProgress{})
	migrationProgressMapping              = queries.MakeStructMapping(migrationProgressType)
	migrationProgressPrimaryKeyMapping, _ = queries.BindMapping(migrationProgressType, migrationProgressMapping, migrationProgressPrimaryKeyColumns)
	migrationProgressInsertCacheMut       sync.RWMutex
	migrationProgressInsertCache          = make(map[string]insertCache)
	migrationProgressUpdateCacheMut       sync.RWMutex
	migrationProgressUpdateCache          = make(map[string]updateCache)
	migrationProgressUpsertCacheMut       sync.RWMutex
	migrationProgressUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var migrationProgressAfterSelectMu sync.Mutex
var migrationProgressAfterSelectHooks []MigrationProgressHook

var migrationProgressBeforeInsertMu sync.Mutex
var migrationProgressBeforeInsertHooks []MigrationProgressHook
var migrationProgressAfterInsertMu sync.Mutex
var migrationProgressAfterInsertHooks []MigrationProgressHook

var migrationProgressBeforeUpdateMu sync.Mutex
var migrationProgressBeforeUpdateHooks []MigrationProgressHook
var migrationProgressAfterUpdateMu sync.Mutex
var migrationProgressAfterUpdateHooks []MigrationProgressHook

var migrationProgressBeforeDeleteMu sync.Mutex
var migrationProgressBeforeDeleteHooks []MigrationProgressHook
var migrationProgressAfterDeleteMu sync.Mutex
var migrationProgressAfterDeleteHooks []MigrationProgressHook

var migrationProgressBeforeUpsertMu sync.Mutex
var migrationProgressBeforeUpsertHooks []MigrationProgressHook
var migrationProgressAfterUpsertMu sync.Mutex
var migrationProgressAfterUpsertHooks []MigrationProgressHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MigrationProgress) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MigrationProgress) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MigrationProgress) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MigrationProgress) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MigrationProgress) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MigrationProgress) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MigrationProgress) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MigrationProgress) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MigrationProgress) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range migrationProgressAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMigrationProgressHook registers your hook function for all future operations.
func AddMigrationProgressHook(hookPoint boil.HookPoint, migrationProgressHook MigrationProgressHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		migrationProgressAfterSelectMu.Lock()
		migrationProgressAfterSelectHooks = append(migrationProgressAfterSelectHooks, migrationProgressHook)
		migrationProgressAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		migrationProgressBeforeInsertMu.Lock()
		migrationProgressBeforeInsertHooks = append(migrationProgressBeforeInsertHooks, migrationProgressHook)
		migrationProgressBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		migrationProgressAfterInsertMu.Lock()
		migrationProgressAfterInsertHooks = append(migrationProgressAfterInsertHooks, migrationProgressHook)
		migrationProgressAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		migrationProgressBeforeUpdateMu.Lock()
		migrationProgressBeforeUpdateHooks = append(migrationProgressBeforeUpdateHooks, migrationProgressHook)
		migrationProgressBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		migrationProgressAfterUpdateMu.Lock()
		migrationProgressAfterUpdateHooks = append(migrationProgressAfterUpdateHooks, migrationProgressHook)
		migrationProgressAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		migrationProgressBeforeDeleteMu.Lock()
		migrationProgressBeforeDeleteHooks = append(migrationProgressBeforeDeleteHooks, migrationProgressHook)
		migrationProgressBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		migrationProgressAfterDeleteMu.Lock()
		migrationProgressAfterDeleteHooks = append(migrationProgressAfterDeleteHooks, migrationProgressHook)
		migrationProgressAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		migrationProgressBeforeUpsertMu.Lock()
		migrationProgressBeforeUpsertHooks = append(migrationProgressBeforeUpsertHooks, migrationProgressHook)
		migrationProgressBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		migrationProgressAfterUpsertMu.Lock()
		migrationProgressAfterUpsertHooks = append(migrationProgressAfterUpsertHooks, migrationProgressHook)
		migrationProgressAfterUpsertMu.Unlock()
	}
}

// One returns a single migrationProgress record from the query.
func (q migrationProgressQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MigrationProgress, error) {
	o := &MigrationProgress{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for migration_progress")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MigrationProgress records from the query.
func (q migrationProgressQuery) All(ctx context.Context, exec boil.ContextExecutor) (MigrationProgressSlice, error) {
	var o []*MigrationProgress

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to MigrationProgress slice")
	}

	if len(migrationProgressAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MigrationProgress records in the query.
func (q migrationProgressQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count migration_progress rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q migrationProgressQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if migration_progress exists")
	}

	return count > 0, nil
}

// MigrationProgresses retrieves all the records using an executor.
func MigrationProgresses(mods ...qm.QueryMod) migrationProgressQuery {
	mods = append(mods, qm.From("\"migration_progress\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"migration_progress\".*"})
	}

	return migrationProgressQuery{q}
}

// FindMigrationProgress retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMigrationProgress(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MigrationProgress, error) {
	migrationProgressObj := &MigrationProgress{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"migration_progress\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, migrationProgressObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from migration_progress")
	}

	if err = migrationProgressObj.doAfterSelectHooks(ctx, exec); err != nil {
		return migrationProgressObj, err
	}

	return migrationProgressObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MigrationProgress) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no migration_progress provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(migrationProgressColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	migrationProgressInsertCacheMut.RLock()
	cache, cached := migrationProgressInsertCache[key]
	migrationProgressInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			migrationProgressAllColumns,
			migrationProgressColumnsWithDefault,
			migrationProgressColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(migrationProgressType, migrationProgressMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(migrationProgressType, migrationProgressMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"migration_progress\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"migration_progress\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into migration_progress")
	}

	if !cached {
		migrationProgressInsertCacheMut.Lock()
		migrationProgressInsertCache[key] = cache
		migrationProgressInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MigrationProgress.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MigrationProgress) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	migrationProgressUpdateCacheMut.RLock()
	cache, cached := migrationProgressUpdateCache[key]
	migrationProgressUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			migrationProgressAllColumns,
			migrationProgressPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update migration_progress, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"migration_progress\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, migrationProgressPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(migrationProgressType, migrationProgressMapping, append(wl, migrationProgressPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update migration_progress row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for migration_progress")
	}

	if !cached {
		migrationProgressUpdateCacheMut.Lock()
		migrationProgressUpdateCache[key] = cache
		migrationProgressUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q migrationProgressQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for migration_progress")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for migration_progress")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MigrationProgressSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migrationProgressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"migration_progress\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, migrationProgressPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in migrationProgress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all migrationProgress")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MigrationProgress) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no migration_progress provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(migrationProgressColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	migrationProgressUpsertCacheMut.RLock()
	cache, cached := migrationProgressUpsertCache[key]
	migrationProgressUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			migrationProgressAllColumns,
			migrationProgressColumnsWithDefault,
			migrationProgressColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			migrationProgressAllColumns,
			migrationProgressPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert migration_progress, could not build update column list")
		}

		ret := strmangle.SetComplement(migrationProgressAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(migrationProgressPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert migration_progress, could not build conflict column list")
			}

			conflict = make([]string, len(migrationProgressPrimaryKeyColumns))
			copy(conflict, migrationProgressPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"migration_progress\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(migrationProgressType, migrationProgressMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(migrationProgressType, migrationProgressMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert migration_progress")
	}

	if !cached {
		migrationProgressUpsertCacheMut.Lock()
		migrationProgressUpsertCache[key] = cache
		migrationProgressUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MigrationProgress record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MigrationProgress) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no MigrationProgress provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), migrationProgressPrimaryKeyMapping)
	sql := "DELETE FROM \"migration_progress\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from migration_progress")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for migration_progress")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q migrationProgressQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no migrationProgressQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from migration_progress")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for migration_progress")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MigrationProgressSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(migrationProgressBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migrationProgressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"migration_progress\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, migrationProgressPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from migrationProgress slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for migration_progress")
	}

	if len(migrationProgressAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MigrationProgress) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMigrationProgress(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MigrationProgressSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MigrationProgressSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), migrationProgressPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"migration_progress\".* FROM \"migration_progress\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, migrationProgressPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in MigrationProgressSlice")
	}

	*o = slice

	return nil
}

// MigrationProgressExists checks if the MigrationProgress row exists.
func MigrationProgressExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"migration_progress\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if migration_progress exists")
	}

	return exists, nil
}

// Exists checks if the MigrationProgress row exists.
func (o *MigrationProgress) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MigrationProgressExists(ctx, exec, o.ID)
}
