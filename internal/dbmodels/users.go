// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// User is an object representing the database table.
type User struct {
	ID           string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Username     string      `boil:"username" json:"username" toml:"username" yaml:"username"`
	FullName     null.String `boil:"full_name" json:"full_name,omitempty" toml:"full_name" yaml:"full_name,omitempty"`
	PasswordHash null.String `boil:"password_hash" json:"password_hash,omitempty" toml:"password_hash" yaml:"password_hash,omitempty"`
	AvatarURL    null.String `boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	IsActive     null.Bool   `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	RoleID       null.String `boil:"role_id" json:"role_id,omitempty" toml:"role_id" yaml:"role_id,omitempty"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt    null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID           string
	Username     string
	FullName     string
	PasswordHash string
	AvatarURL    string
	IsActive     string
	RoleID       string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	Username:     "username",
	FullName:     "full_name",
	PasswordHash: "password_hash",
	AvatarURL:    "avatar_url",
	IsActive:     "is_active",
	RoleID:       "role_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
}

var UserTableColumns = struct {
	ID           string
	Username     string
	FullName     string
	PasswordHash string
	AvatarURL    string
	IsActive     string
	RoleID       string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
}{
	ID:           "users.id",
	Username:     "users.username",
	FullName:     "users.full_name",
	PasswordHash: "users.password_hash",
	AvatarURL:    "users.avatar_url",
	IsActive:     "users.is_active",
	RoleID:       "users.role_id",
	CreatedAt:    "users.created_at",
	UpdatedAt:    "users.updated_at",
	DeletedAt:    "users.deleted_at",
}

// Generated where

var UserWhere = struct {
	ID           whereHelperstring
	Username     whereHelperstring
	FullName     whereHelpernull_String
	PasswordHash whereHelpernull_String
	AvatarURL    whereHelpernull_String
	IsActive     whereHelpernull_Bool
	RoleID       whereHelpernull_String
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperstring{field: "\"users\".\"id\""},
	Username:     whereHelperstring{field: "\"users\".\"username\""},
	FullName:     whereHelpernull_String{field: "\"users\".\"full_name\""},
	PasswordHash: whereHelpernull_String{field: "\"users\".\"password_hash\""},
	AvatarURL:    whereHelpernull_String{field: "\"users\".\"avatar_url\""},
	IsActive:     whereHelpernull_Bool{field: "\"users\".\"is_active\""},
	RoleID:       whereHelpernull_String{field: "\"users\".\"role_id\""},
	CreatedAt:    whereHelpernull_Time{field: "\"users\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"users\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"users\".\"deleted_at\""},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	Role                   string
	CreatedByBoards        string
	AssignedToCards        string
	CreatedByCards         string
	UpdatedByCards         string
	EditedByComments       string
	Comments               string
	CreatedByLabels        string
	DeletedByLabels        string
	UpdatedByLabels        string
	CreatedByLists         string
	CreatedByRebalanceJobs string
	CreatedUserUploads     string
}{
	Role:                   "Role",
	CreatedByBoards:        "CreatedByBoards",
	AssignedToCards:        "AssignedToCards",
	CreatedByCards:         "CreatedByCards",
	UpdatedByCards:         "UpdatedByCards",
	EditedByComments:       "EditedByComments",
	Comments:               "Comments",
	CreatedByLabels:        "CreatedByLabels",
	DeletedByLabels:        "DeletedByLabels",
	UpdatedByLabels:        "UpdatedByLabels",
	CreatedByLists:         "CreatedByLists",
	CreatedByRebalanceJobs: "CreatedByRebalanceJobs",
	CreatedUserUploads:     "CreatedUserUploads",
}

// userR is where relationships are stored.
type userR struct {
	Role                   *Role             `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
	CreatedByBoards        BoardSlice        `boil:"CreatedByBoards" json:"CreatedByBoards" toml:"CreatedByBoards" yaml:"CreatedByBoards"`
	AssignedToCards        CardSlice         `boil:"AssignedToCards" json:"AssignedToCards" toml:"AssignedToCards" yaml:"AssignedToCards"`
	CreatedByCards         CardSlice         `boil:"CreatedByCards" json:"CreatedByCards" toml:"CreatedByCards" yaml:"CreatedByCards"`
	UpdatedByCards         CardSlice         `boil:"UpdatedByCards" json:"UpdatedByCards" toml:"UpdatedByCards" yaml:"UpdatedByCards"`
	EditedByComments       CommentSlice      `boil:"EditedByComments" json:"EditedByComments" toml:"EditedByComments" yaml:"EditedByComments"`
	Comments               CommentSlice      `boil:"Comments" json:"Comments" toml:"Comments" yaml:"Comments"`
	CreatedByLabels        LabelSlice        `boil:"CreatedByLabels" json:"CreatedByLabels" toml:"CreatedByLabels" yaml:"CreatedByLabels"`
	DeletedByLabels        LabelSlice        `boil:"DeletedByLabels" json:"DeletedByLabels" toml:"DeletedByLabels" yaml:"DeletedByLabels"`
	UpdatedByLabels        LabelSlice        `boil:"UpdatedByLabels" json:"UpdatedByLabels" toml:"UpdatedByLabels" yaml:"UpdatedByLabels"`
	CreatedByLists         ListSlice         `boil:"CreatedByLists" json:"CreatedByLists" toml:"CreatedByLists" yaml:"CreatedByLists"`
	CreatedByRebalanceJobs RebalanceJobSlice `boil:"CreatedByRebalanceJobs" json:"CreatedByRebalanceJobs" toml:"CreatedByRebalanceJobs" yaml:"CreatedByRebalanceJobs"`
	CreatedUserUploads     UploadSlice       `boil:"CreatedUserUploads" json:"CreatedUserUploads" toml:"CreatedUserUploads" yaml:"CreatedUserUploads"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

func (o *User) GetRole() *Role {
	if o == nil {
		return nil
	}

	return o.R.GetRole()
}

func (r *userR) GetRole() *Role {
	if r == nil {
		return nil
	}

	return r.Role
}

func (o *User) GetCreatedByBoards() BoardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedByBoards()
}

func (r *userR) GetCreatedByBoards() BoardSlice {
	if r == nil {
		return nil
	}

	return r.CreatedByBoards
}

func (o *User) GetAssignedToCards() CardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAssignedToCards()
}

func (r *userR) GetAssignedToCards() CardSlice {
	if r == nil {
		return nil
	}

	return r.AssignedToCards
}

func (o *User) GetCreatedByCards() CardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedByCards()
}

func (r *userR) GetCreatedByCards() CardSlice {
	if r == nil {
		return nil
	}

	return r.CreatedByCards
}

func (o *User) GetUpdatedByCards() CardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUpdatedByCards()
}

func (r *userR) GetUpdatedByCards() CardSlice {
	if r == nil {
		return nil
	}

	return r.UpdatedByCards
}

func (o *User) GetEditedByComments() CommentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetEditedByComments()
}

func (r *userR) GetEditedByComments() CommentSlice {
	if r == nil {
		return nil
	}

	return r.EditedByComments
}

func (o *User) GetComments() CommentSlice {
	if o == nil {
		return nil
	}

	return o.R.GetComments()
}

func (r *userR) GetComments() CommentSlice {
	if r == nil {
		return nil
	}

	return r.Comments
}

func (o *User) GetCreatedByLabels() LabelSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedByLabels()
}

func (r *userR) GetCreatedByLabels() LabelSlice {
	if r == nil {
		return nil
	}

	return r.CreatedByLabels
}

func (o *User) GetDeletedByLabels() LabelSlice {
	if o == nil {
		return nil
	}

	return o.R.GetDeletedByLabels()
}

func (r *userR) GetDeletedByLabels() LabelSlice {
	if r == nil {
		return nil
	}

	return r.DeletedByLabels
}

func (o *User) GetUpdatedByLabels() LabelSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUpdatedByLabels()
}

func (r *userR) GetUpdatedByLabels() LabelSlice {
	if r == nil {
		return nil
	}

	return r.UpdatedByLabels
}

func (o *User) GetCreatedByLists() ListSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedByLists()
}

func (r *userR) GetCreatedByLists() ListSlice {
	if r == nil {
		return nil
	}

	return r.CreatedByLists
}

func (o *User) GetCreatedByRebalanceJobs() RebalanceJobSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedByRebalanceJobs()
}

func (r *userR) GetCreatedByRebalanceJobs() RebalanceJobSlice {
	if r == nil {
		return nil
	}

	return r.CreatedByRebalanceJobs
}

func (o *User) GetCreatedUserUploads() UploadSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedUserUploads()
}

func (r *userR) GetCreatedUserUploads() UploadSlice {
	if r == nil {
		return nil
	}

	return r.CreatedUserUploads
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "username", "full_name", "password_hash", "avatar_url", "is_active", "role_id", "created_at", "updated_at", "deleted_at"}
	userColumnsWithoutDefault = []string{"username"}
	userColumnsWithDefault    = []string{"id", "full_name", "password_hash", "avatar_url", "is_active", "role_id", "created_at", "updated_at", "deleted_at"}
	userPrimaryKeyColumns     = []string{"id"}
	userGeneratedColumns      = []string{}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User
	// UserHook is the signature for custom User hook methods
	UserHook func(context.Context, boil.ContextExecutor, *User) error

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAfterSelectMu sync.Mutex
var userAfterSelectHooks []UserHook

var userBeforeInsertMu sync.Mutex
var userBeforeInsertHooks []UserHook
var userAfterInsertMu sync.Mutex
var userAfterInsertHooks []UserHook

var userBeforeUpdateMu sync.Mutex
var userBeforeUpdateHooks []UserHook
var userAfterUpdateMu sync.Mutex
var userAfterUpdateHooks []UserHook

var userBeforeDeleteMu sync.Mutex
var userBeforeDeleteHooks []UserHook
var userAfterDeleteMu sync.Mutex
var userAfterDeleteHooks []UserHook

var userBeforeUpsertMu sync.Mutex
var userBeforeUpsertHooks []UserHook
var userAfterUpsertMu sync.Mutex
var userAfterUpsertHooks []UserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *User) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *User) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *User) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *User) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *User) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *User) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *User) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *User) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *User) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserHook registers your hook function for all future operations.
func AddUserHook(hookPoint boil.HookPoint, userHook UserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAfterSelectMu.Lock()
		userAfterSelectHooks = append(userAfterSelectHooks, userHook)
		userAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userBeforeInsertMu.Lock()
		userBeforeInsertHooks = append(userBeforeInsertHooks, userHook)
		userBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userAfterInsertMu.Lock()
		userAfterInsertHooks = append(userAfterInsertHooks, userHook)
		userAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userBeforeUpdateMu.Lock()
		userBeforeUpdateHooks = append(userBeforeUpdateHooks, userHook)
		userBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userAfterUpdateMu.Lock()
		userAfterUpdateHooks = append(userAfterUpdateHooks, userHook)
		userAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userBeforeDeleteMu.Lock()
		userBeforeDeleteHooks = append(userBeforeDeleteHooks, userHook)
		userBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userAfterDeleteMu.Lock()
		userAfterDeleteHooks = append(userAfterDeleteHooks, userHook)
		userAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userBeforeUpsertMu.Lock()
		userBeforeUpsertHooks = append(userBeforeUpsertHooks, userHook)
		userBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userAfterUpsertMu.Lock()
		userAfterUpsertHooks = append(userAfterUpsertHooks, userHook)
		userAfterUpsertMu.Unlock()
	}
}

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to User slice")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if users exists")
	}

	return count > 0, nil
}

// Role pointed to by the foreign key.
func (o *User) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// CreatedByBoards retrieves all the board's Boards with an executor via created_by column.
func (o *User) CreatedByBoards(mods ...qm.QueryMod) boardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"boards\".\"created_by\"=?", o.ID),
	)

	return Boards(queryMods...)
}

// AssignedToCards retrieves all the card's Cards with an executor via assigned_to column.
func (o *User) AssignedToCards(mods ...qm.QueryMod) cardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cards\".\"assigned_to\"=?", o.ID),
	)

	return Cards(queryMods...)
}

// CreatedByCards retrieves all the card's Cards with an executor via created_by column.
func (o *User) CreatedByCards(mods ...qm.QueryMod) cardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cards\".\"created_by\"=?", o.ID),
	)

	return Cards(queryMods...)
}

// UpdatedByCards retrieves all the card's Cards with an executor via updated_by column.
func (o *User) UpdatedByCards(mods ...qm.QueryMod) cardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cards\".\"updated_by\"=?", o.ID),
	)

	return Cards(queryMods...)
}

// EditedByComments retrieves all the comment's Comments with an executor via edited_by column.
func (o *User) EditedByComments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comments\".\"edited_by\"=?", o.ID),
	)

	return Comments(queryMods...)
}

// Comments retrieves all the comment's Comments with an executor.
func (o *User) Comments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comments\".\"user_id\"=?", o.ID),
	)

	return Comments(queryMods...)
}

// CreatedByLabels retrieves all the label's Labels with an executor via created_by column.
func (o *User) CreatedByLabels(mods ...qm.QueryMod) labelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"labels\".\"created_by\"=?", o.ID),
	)

	return Labels(queryMods...)
}

// DeletedByLabels retrieves all the label's Labels with an executor via deleted_by column.
func (o *User) DeletedByLabels(mods ...qm.QueryMod) labelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"labels\".\"deleted_by\"=?", o.ID),
	)

	return Labels(queryMods...)
}

// UpdatedByLabels retrieves all the label's Labels with an executor via updated_by column.
func (o *User) UpdatedByLabels(mods ...qm.QueryMod) labelQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"labels\".\"updated_by\"=?", o.ID),
	)

	return Labels(queryMods...)
}

// CreatedByLists retrieves all the list's Lists with an executor via created_by column.
func (o *User) CreatedByLists(mods ...qm.QueryMod) listQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lists\".\"created_by\"=?", o.ID),
	)

	return Lists(queryMods...)
}

// CreatedByRebalanceJobs retrieves all the rebalance_job's RebalanceJobs with an executor via created_by column.
func (o *User) CreatedByRebalanceJobs(mods ...qm.QueryMod) rebalanceJobQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"rebalance_jobs\".\"created_by\"=?", o.ID),
	)

	return RebalanceJobs(queryMods...)
}

// CreatedUserUploads retrieves all the upload's Uploads with an executor via created_user_id column.
func (o *User) CreatedUserUploads(mods ...qm.QueryMod) uploadQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"uploads\".\"created_user_id\"=?", o.ID),
	)

	return Uploads(queryMods...)
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.RoleID) {
			args[object.RoleID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			if !queries.IsNil(obj.RoleID) {
				args[obj.RoleID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`roles.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.Users = append(foreign.R.Users, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoleID, foreign.ID) {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.Users = append(foreign.R.Users, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByBoards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByBoards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`boards`),
		qm.WhereIn(`boards.created_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`boards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load boards")
	}

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice boards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on boards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for boards")
	}

	if len(boardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByBoards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &boardR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedBy) {
				local.R.CreatedByBoards = append(local.R.CreatedByBoards, foreign)
				if foreign.R == nil {
					foreign.R = &boardR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadAssignedToCards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadAssignedToCards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.assigned_to in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cards")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssignedToCards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardR{}
			}
			foreign.R.AssignedToUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AssignedTo) {
				local.R.AssignedToCards = append(local.R.AssignedToCards, foreign)
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.AssignedToUser = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByCards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByCards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.created_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cards")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByCards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedBy) {
				local.R.CreatedByCards = append(local.R.CreatedByCards, foreign)
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByCards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByCards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.updated_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cards")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByCards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardR{}
			}
			foreign.R.UpdatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UpdatedBy) {
				local.R.UpdatedByCards = append(local.R.UpdatedByCards, foreign)
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.UpdatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadEditedByComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadEditedByComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.edited_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`comments.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comments")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EditedByComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.EditedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.EditedBy) {
				local.R.EditedByComments = append(local.R.EditedByComments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.EditedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.user_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`comments.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comments")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Comments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.Comments = append(local.R.Comments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`labels`),
		qm.WhereIn(`labels.created_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`labels.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load labels")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if len(labelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &labelR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedBy) {
				local.R.CreatedByLabels = append(local.R.CreatedByLabels, foreign)
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadDeletedByLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadDeletedByLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`labels`),
		qm.WhereIn(`labels.deleted_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`labels.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load labels")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if len(labelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeletedByLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &labelR{}
			}
			foreign.R.DeletedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.DeletedBy) {
				local.R.DeletedByLabels = append(local.R.DeletedByLabels, foreign)
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.DeletedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByLabels allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByLabels(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`labels`),
		qm.WhereIn(`labels.updated_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`labels.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load labels")
	}

	var resultSlice []*Label
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice labels")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on labels")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for labels")
	}

	if len(labelAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UpdatedByLabels = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &labelR{}
			}
			foreign.R.UpdatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UpdatedBy) {
				local.R.UpdatedByLabels = append(local.R.UpdatedByLabels, foreign)
				if foreign.R == nil {
					foreign.R = &labelR{}
				}
				foreign.R.UpdatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByLists allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByLists(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`lists`),
		qm.WhereIn(`lists.created_by in ?`, argsSlice...),
		qmhelper.WhereIsNull(`lists.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lists")
	}

	var resultSlice []*List
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lists")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lists")
	}

	if len(listAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByLists = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &listR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedBy) {
				local.R.CreatedByLists = append(local.R.CreatedByLists, foreign)
				if foreign.R == nil {
					foreign.R = &listR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByRebalanceJobs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByRebalanceJobs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rebalance_jobs`),
		qm.WhereIn(`rebalance_jobs.created_by in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rebalance_jobs")
	}

	var resultSlice []*RebalanceJob
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rebalance_jobs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rebalance_jobs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rebalance_jobs")
	}

	if len(rebalanceJobAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByRebalanceJobs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rebalanceJobR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedBy) {
				local.R.CreatedByRebalanceJobs = append(local.R.CreatedByRebalanceJobs, foreign)
				if foreign.R == nil {
					foreign.R = &rebalanceJobR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedUserUploads allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedUserUploads(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`uploads`),
		qm.WhereIn(`uploads.created_user_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`uploads.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load uploads")
	}

	var resultSlice []*Upload
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice uploads")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on uploads")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for uploads")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedUserUploads = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &uploadR{}
			}
			foreign.R.CreatedUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedUserID {
				local.R.CreatedUserUploads = append(local.R.CreatedUserUploads, foreign)
				if foreign.R == nil {
					foreign.R = &uploadR{}
				}
				foreign.R.CreatedUser = local
				break
			}
		}
	}

	return nil
}

// SetRole of the user to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.Users.
func (o *User) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoleID, related.ID)
	if o.R == nil {
		o.R = &userR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			Users: UserSlice{o},
		}
	} else {
		related.R.Users = append(related.R.Users, o)
	}

	return nil
}

// RemoveRole relationship.
// Sets o.R.Role to nil.
// Removes o from all passed in related items' relationships struct.
func (o *User) RemoveRole(ctx context.Context, exec boil.ContextExecutor, related *Role) error {
	var err error

	queries.SetScanner(&o.RoleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("role_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Role = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Users {
		if queries.Equal(o.RoleID, ri.RoleID) {
			continue
		}

		ln := len(related.R.Users)
		if ln > 1 && i < ln-1 {
			related.R.Users[i] = related.R.Users[ln-1]
		}
		related.R.Users = related.R.Users[:ln-1]
		break
	}
	return nil
}

// AddCreatedByBoards adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByBoards.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByBoards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Board) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"boards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, boardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByBoards: related,
		}
	} else {
		o.R.CreatedByBoards = append(o.R.CreatedByBoards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &boardR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// SetCreatedByBoards removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUser's CreatedByBoards accordingly.
// Replaces o.R.CreatedByBoards with related.
// Sets related.R.CreatedByUser's CreatedByBoards accordingly.
func (o *User) SetCreatedByBoards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Board) error {
	query := "update \"boards\" set \"created_by\" = null where \"created_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByBoards {
			queries.SetScanner(&rel.CreatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUser = nil
		}
		o.R.CreatedByBoards = nil
	}

	return o.AddCreatedByBoards(ctx, exec, insert, related...)
}

// RemoveCreatedByBoards relationships from objects passed in.
// Removes related items from R.CreatedByBoards (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUser.
func (o *User) RemoveCreatedByBoards(ctx context.Context, exec boil.ContextExecutor, related ...*Board) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedBy, nil)
		if rel.R != nil {
			rel.R.CreatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByBoards {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByBoards)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByBoards[i] = o.R.CreatedByBoards[ln-1]
			}
			o.R.CreatedByBoards = o.R.CreatedByBoards[:ln-1]
			break
		}
	}

	return nil
}

// AddAssignedToCards adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.AssignedToCards.
// Sets related.R.AssignedToUser appropriately.
func (o *User) AddAssignedToCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Card) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AssignedTo, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"assigned_to"}),
				strmangle.WhereClause("\"", "\"", 2, cardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AssignedTo, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			AssignedToCards: related,
		}
	} else {
		o.R.AssignedToCards = append(o.R.AssignedToCards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardR{
				AssignedToUser: o,
			}
		} else {
			rel.R.AssignedToUser = o
		}
	}
	return nil
}

// SetAssignedToCards removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AssignedToUser's AssignedToCards accordingly.
// Replaces o.R.AssignedToCards with related.
// Sets related.R.AssignedToUser's AssignedToCards accordingly.
func (o *User) SetAssignedToCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Card) error {
	query := "update \"cards\" set \"assigned_to\" = null where \"assigned_to\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AssignedToCards {
			queries.SetScanner(&rel.AssignedTo, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AssignedToUser = nil
		}
		o.R.AssignedToCards = nil
	}

	return o.AddAssignedToCards(ctx, exec, insert, related...)
}

// RemoveAssignedToCards relationships from objects passed in.
// Removes related items from R.AssignedToCards (uses pointer comparison, removal does not keep order)
// Sets related.R.AssignedToUser.
func (o *User) RemoveAssignedToCards(ctx context.Context, exec boil.ContextExecutor, related ...*Card) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AssignedTo, nil)
		if rel.R != nil {
			rel.R.AssignedToUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("assigned_to")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AssignedToCards {
			if rel != ri {
				continue
			}

			ln := len(o.R.AssignedToCards)
			if ln > 1 && i < ln-1 {
				o.R.AssignedToCards[i] = o.R.AssignedToCards[ln-1]
			}
			o.R.AssignedToCards = o.R.AssignedToCards[:ln-1]
			break
		}
	}

	return nil
}

// AddCreatedByCards adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByCards.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Card) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, cardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByCards: related,
		}
	} else {
		o.R.CreatedByCards = append(o.R.CreatedByCards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// SetCreatedByCards removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUser's CreatedByCards accordingly.
// Replaces o.R.CreatedByCards with related.
// Sets related.R.CreatedByUser's CreatedByCards accordingly.
func (o *User) SetCreatedByCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Card) error {
	query := "update \"cards\" set \"created_by\" = null where \"created_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByCards {
			queries.SetScanner(&rel.CreatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUser = nil
		}
		o.R.CreatedByCards = nil
	}

	return o.AddCreatedByCards(ctx, exec, insert, related...)
}

// RemoveCreatedByCards relationships from objects passed in.
// Removes related items from R.CreatedByCards (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUser.
func (o *User) RemoveCreatedByCards(ctx context.Context, exec boil.ContextExecutor, related ...*Card) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedBy, nil)
		if rel.R != nil {
			rel.R.CreatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByCards {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByCards)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByCards[i] = o.R.CreatedByCards[ln-1]
			}
			o.R.CreatedByCards = o.R.CreatedByCards[:ln-1]
			break
		}
	}

	return nil
}

// AddUpdatedByCards adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByCards.
// Sets related.R.UpdatedByUser appropriately.
func (o *User) AddUpdatedByCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Card) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UpdatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by"}),
				strmangle.WhereClause("\"", "\"", 2, cardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UpdatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByCards: related,
		}
	} else {
		o.R.UpdatedByCards = append(o.R.UpdatedByCards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardR{
				UpdatedByUser: o,
			}
		} else {
			rel.R.UpdatedByUser = o
		}
	}
	return nil
}

// SetUpdatedByCards removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UpdatedByUser's UpdatedByCards accordingly.
// Replaces o.R.UpdatedByCards with related.
// Sets related.R.UpdatedByUser's UpdatedByCards accordingly.
func (o *User) SetUpdatedByCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Card) error {
	query := "update \"cards\" set \"updated_by\" = null where \"updated_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UpdatedByCards {
			queries.SetScanner(&rel.UpdatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UpdatedByUser = nil
		}
		o.R.UpdatedByCards = nil
	}

	return o.AddUpdatedByCards(ctx, exec, insert, related...)
}

// RemoveUpdatedByCards relationships from objects passed in.
// Removes related items from R.UpdatedByCards (uses pointer comparison, removal does not keep order)
// Sets related.R.UpdatedByUser.
func (o *User) RemoveUpdatedByCards(ctx context.Context, exec boil.ContextExecutor, related ...*Card) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UpdatedBy, nil)
		if rel.R != nil {
			rel.R.UpdatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("updated_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UpdatedByCards {
			if rel != ri {
				continue
			}

			ln := len(o.R.UpdatedByCards)
			if ln > 1 && i < ln-1 {
				o.R.UpdatedByCards[i] = o.R.UpdatedByCards[ln-1]
			}
			o.R.UpdatedByCards = o.R.UpdatedByCards[:ln-1]
			break
		}
	}

	return nil
}

// AddEditedByComments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.EditedByComments.
// Sets related.R.EditedByUser appropriately.
func (o *User) AddEditedByComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.EditedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"edited_by"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.EditedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			EditedByComments: related,
		}
	} else {
		o.R.EditedByComments = append(o.R.EditedByComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				EditedByUser: o,
			}
		} else {
			rel.R.EditedByUser = o
		}
	}
	return nil
}

// SetEditedByComments removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.EditedByUser's EditedByComments accordingly.
// Replaces o.R.EditedByComments with related.
// Sets related.R.EditedByUser's EditedByComments accordingly.
func (o *User) SetEditedByComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	query := "update \"comments\" set \"edited_by\" = null where \"edited_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.EditedByComments {
			queries.SetScanner(&rel.EditedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.EditedByUser = nil
		}
		o.R.EditedByComments = nil
	}

	return o.AddEditedByComments(ctx, exec, insert, related...)
}

// RemoveEditedByComments relationships from objects passed in.
// Removes related items from R.EditedByComments (uses pointer comparison, removal does not keep order)
// Sets related.R.EditedByUser.
func (o *User) RemoveEditedByComments(ctx context.Context, exec boil.ContextExecutor, related ...*Comment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.EditedBy, nil)
		if rel.R != nil {
			rel.R.EditedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("edited_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.EditedByComments {
			if rel != ri {
				continue
			}

			ln := len(o.R.EditedByComments)
			if ln > 1 && i < ln-1 {
				o.R.EditedByComments[i] = o.R.EditedByComments[ln-1]
			}
			o.R.EditedByComments = o.R.EditedByComments[:ln-1]
			break
		}
	}

	return nil
}

// AddComments adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.User appropriately.
func (o *User) AddComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AddCreatedByLabels adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByLabels.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Label) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, labelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByLabels: related,
		}
	} else {
		o.R.CreatedByLabels = append(o.R.CreatedByLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &labelR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// SetCreatedByLabels removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUser's CreatedByLabels accordingly.
// Replaces o.R.CreatedByLabels with related.
// Sets related.R.CreatedByUser's CreatedByLabels accordingly.
func (o *User) SetCreatedByLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Label) error {
	query := "update \"labels\" set \"created_by\" = null where \"created_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByLabels {
			queries.SetScanner(&rel.CreatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUser = nil
		}
		o.R.CreatedByLabels = nil
	}

	return o.AddCreatedByLabels(ctx, exec, insert, related...)
}

// RemoveCreatedByLabels relationships from objects passed in.
// Removes related items from R.CreatedByLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUser.
func (o *User) RemoveCreatedByLabels(ctx context.Context, exec boil.ContextExecutor, related ...*Label) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedBy, nil)
		if rel.R != nil {
			rel.R.CreatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByLabels)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByLabels[i] = o.R.CreatedByLabels[ln-1]
			}
			o.R.CreatedByLabels = o.R.CreatedByLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddDeletedByLabels adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.DeletedByLabels.
// Sets related.R.DeletedByUser appropriately.
func (o *User) AddDeletedByLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Label) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeletedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"deleted_by"}),
				strmangle.WhereClause("\"", "\"", 2, labelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeletedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			DeletedByLabels: related,
		}
	} else {
		o.R.DeletedByLabels = append(o.R.DeletedByLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &labelR{
				DeletedByUser: o,
			}
		} else {
			rel.R.DeletedByUser = o
		}
	}
	return nil
}

// SetDeletedByLabels removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.DeletedByUser's DeletedByLabels accordingly.
// Replaces o.R.DeletedByLabels with related.
// Sets related.R.DeletedByUser's DeletedByLabels accordingly.
func (o *User) SetDeletedByLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Label) error {
	query := "update \"labels\" set \"deleted_by\" = null where \"deleted_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.DeletedByLabels {
			queries.SetScanner(&rel.DeletedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.DeletedByUser = nil
		}
		o.R.DeletedByLabels = nil
	}

	return o.AddDeletedByLabels(ctx, exec, insert, related...)
}

// RemoveDeletedByLabels relationships from objects passed in.
// Removes related items from R.DeletedByLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.DeletedByUser.
func (o *User) RemoveDeletedByLabels(ctx context.Context, exec boil.ContextExecutor, related ...*Label) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.DeletedBy, nil)
		if rel.R != nil {
			rel.R.DeletedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("deleted_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.DeletedByLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.DeletedByLabels)
			if ln > 1 && i < ln-1 {
				o.R.DeletedByLabels[i] = o.R.DeletedByLabels[ln-1]
			}
			o.R.DeletedByLabels = o.R.DeletedByLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddUpdatedByLabels adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByLabels.
// Sets related.R.UpdatedByUser appropriately.
func (o *User) AddUpdatedByLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Label) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UpdatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"labels\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by"}),
				strmangle.WhereClause("\"", "\"", 2, labelPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UpdatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByLabels: related,
		}
	} else {
		o.R.UpdatedByLabels = append(o.R.UpdatedByLabels, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &labelR{
				UpdatedByUser: o,
			}
		} else {
			rel.R.UpdatedByUser = o
		}
	}
	return nil
}

// SetUpdatedByLabels removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UpdatedByUser's UpdatedByLabels accordingly.
// Replaces o.R.UpdatedByLabels with related.
// Sets related.R.UpdatedByUser's UpdatedByLabels accordingly.
func (o *User) SetUpdatedByLabels(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Label) error {
	query := "update \"labels\" set \"updated_by\" = null where \"updated_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UpdatedByLabels {
			queries.SetScanner(&rel.UpdatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UpdatedByUser = nil
		}
		o.R.UpdatedByLabels = nil
	}

	return o.AddUpdatedByLabels(ctx, exec, insert, related...)
}

// RemoveUpdatedByLabels relationships from objects passed in.
// Removes related items from R.UpdatedByLabels (uses pointer comparison, removal does not keep order)
// Sets related.R.UpdatedByUser.
func (o *User) RemoveUpdatedByLabels(ctx context.Context, exec boil.ContextExecutor, related ...*Label) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UpdatedBy, nil)
		if rel.R != nil {
			rel.R.UpdatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("updated_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UpdatedByLabels {
			if rel != ri {
				continue
			}

			ln := len(o.R.UpdatedByLabels)
			if ln > 1 && i < ln-1 {
				o.R.UpdatedByLabels[i] = o.R.UpdatedByLabels[ln-1]
			}
			o.R.UpdatedByLabels = o.R.UpdatedByLabels[:ln-1]
			break
		}
	}

	return nil
}

// AddCreatedByLists adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByLists.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByLists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*List) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lists\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, listPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByLists: related,
		}
	} else {
		o.R.CreatedByLists = append(o.R.CreatedByLists, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &listR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// SetCreatedByLists removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUser's CreatedByLists accordingly.
// Replaces o.R.CreatedByLists with related.
// Sets related.R.CreatedByUser's CreatedByLists accordingly.
func (o *User) SetCreatedByLists(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*List) error {
	query := "update \"lists\" set \"created_by\" = null where \"created_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByLists {
			queries.SetScanner(&rel.CreatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUser = nil
		}
		o.R.CreatedByLists = nil
	}

	return o.AddCreatedByLists(ctx, exec, insert, related...)
}

// RemoveCreatedByLists relationships from objects passed in.
// Removes related items from R.CreatedByLists (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUser.
func (o *User) RemoveCreatedByLists(ctx context.Context, exec boil.ContextExecutor, related ...*List) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedBy, nil)
		if rel.R != nil {
			rel.R.CreatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByLists {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByLists)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByLists[i] = o.R.CreatedByLists[ln-1]
			}
			o.R.CreatedByLists = o.R.CreatedByLists[:ln-1]
			break
		}
	}

	return nil
}

// AddCreatedByRebalanceJobs adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByRebalanceJobs.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByRebalanceJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RebalanceJob) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"rebalance_jobs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
				strmangle.WhereClause("\"", "\"", 2, rebalanceJobPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByRebalanceJobs: related,
		}
	} else {
		o.R.CreatedByRebalanceJobs = append(o.R.CreatedByRebalanceJobs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rebalanceJobR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// SetCreatedByRebalanceJobs removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUser's CreatedByRebalanceJobs accordingly.
// Replaces o.R.CreatedByRebalanceJobs with related.
// Sets related.R.CreatedByUser's CreatedByRebalanceJobs accordingly.
func (o *User) SetCreatedByRebalanceJobs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RebalanceJob) error {
	query := "update \"rebalance_jobs\" set \"created_by\" = null where \"created_by\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByRebalanceJobs {
			queries.SetScanner(&rel.CreatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUser = nil
		}
		o.R.CreatedByRebalanceJobs = nil
	}

	return o.AddCreatedByRebalanceJobs(ctx, exec, insert, related...)
}

// RemoveCreatedByRebalanceJobs relationships from objects passed in.
// Removes related items from R.CreatedByRebalanceJobs (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUser.
func (o *User) RemoveCreatedByRebalanceJobs(ctx context.Context, exec boil.ContextExecutor, related ...*RebalanceJob) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedBy, nil)
		if rel.R != nil {
			rel.R.CreatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByRebalanceJobs {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByRebalanceJobs)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByRebalanceJobs[i] = o.R.CreatedByRebalanceJobs[ln-1]
			}
			o.R.CreatedByRebalanceJobs = o.R.CreatedByRebalanceJobs[:ln-1]
			break
		}
	}

	return nil
}

// AddCreatedUserUploads adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedUserUploads.
// Sets related.R.CreatedUser appropriately.
func (o *User) AddCreatedUserUploads(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Upload) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"uploads\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, uploadPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedUserUploads: related,
		}
	} else {
		o.R.CreatedUserUploads = append(o.R.CreatedUserUploads, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadR{
				CreatedUser: o,
			}
		} else {
			rel.R.CreatedUser = o
		}
	}
	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("\"users\""), qmhelper.WhereIsNull("\"users\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users\".*"})
	}

	return userQuery{q}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from users")
	}

	if err = userObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userObj, err
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into users")
	}

	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for users")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert users, could not build update column list")
		}

		ret := strmangle.SetComplement(userAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert users, could not build conflict column list")
			}

			conflict = make([]string, len(userPrimaryKeyColumns))
			copy(conflict, userPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert users")
	}

	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no User provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
		sql = "DELETE FROM \"users\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"users\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no userQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"users\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"users\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, userPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for users")
	}

	if len(userAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users\".* FROM \"users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if users exists")
	}

	return exists, nil
}

// Exists checks if the User row exists.
func (o *User) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserExists(ctx, exec, o.ID)
}
