apiVersion: apps/v1
kind: Deployment
metadata:
  name: kanban-api
  namespace: kanban-api
  labels:
    app: kanban-api
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kanban-api
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kanban-api
      namespace: kanban-api
    spec:
      imagePullSecrets:
      - name: harbor-secret
      containers:
      - name: kanban-api
        image: harbor.ngtantai.pro/kanban/kanban-api:250729-111505
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # Load environment variables from existing secrets
        envFrom:
        - secretRef:
            name: kanban-api-config
        - secretRef:
            name: kanban-api-database
        - secretRef:
            name: kanban-api-discord
        - secretRef:
            name: kanban-api-minio
        - secretRef:
            name: kanban-api-security
        env:
        - name: CONTAINER_NAME
          value: "kanban-api"
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: v1
kind: Service
metadata:
  name: kanban-api-service
  namespace: kanban-api
  labels:
    app: kanban-api
spec:
  selector:
    app: kanban-api
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kanban-api-ingress
  namespace: kanban-api
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60s"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60s"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60s"
spec:
  ingressClassName: nginx
  rules:
  - host: kanban-api.ngtantai.pro
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kanban-api-service
            port:
              number: 80