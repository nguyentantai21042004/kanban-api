// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CardActivity is an object representing the database table.
type CardActivity struct {
	ID         string         `boil:"id" json:"id" toml:"id" yaml:"id"`
	CardID     string         `boil:"card_id" json:"card_id" toml:"card_id" yaml:"card_id"`
	ActionType CardActionType `boil:"action_type" json:"action_type" toml:"action_type" yaml:"action_type"`
	OldData    null.JSON      `boil:"old_data" json:"old_data,omitempty" toml:"old_data" yaml:"old_data,omitempty"`
	NewData    null.JSON      `boil:"new_data" json:"new_data,omitempty" toml:"new_data" yaml:"new_data,omitempty"`
	CreatedAt  time.Time      `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time      `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time      `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *cardActivityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cardActivityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CardActivityColumns = struct {
	ID         string
	CardID     string
	ActionType string
	OldData    string
	NewData    string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "id",
	CardID:     "card_id",
	ActionType: "action_type",
	OldData:    "old_data",
	NewData:    "new_data",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
}

var CardActivityTableColumns = struct {
	ID         string
	CardID     string
	ActionType string
	OldData    string
	NewData    string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
}{
	ID:         "card_activities.id",
	CardID:     "card_activities.card_id",
	ActionType: "card_activities.action_type",
	OldData:    "card_activities.old_data",
	NewData:    "card_activities.new_data",
	CreatedAt:  "card_activities.created_at",
	UpdatedAt:  "card_activities.updated_at",
	DeletedAt:  "card_activities.deleted_at",
}

// Generated where

type whereHelperCardActionType struct{ field string }

func (w whereHelperCardActionType) EQ(x CardActionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperCardActionType) NEQ(x CardActionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperCardActionType) LT(x CardActionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperCardActionType) LTE(x CardActionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperCardActionType) GT(x CardActionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperCardActionType) GTE(x CardActionType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperCardActionType) IN(slice []CardActionType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperCardActionType) NIN(slice []CardActionType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CardActivityWhere = struct {
	ID         whereHelperstring
	CardID     whereHelperstring
	ActionType whereHelperCardActionType
	OldData    whereHelpernull_JSON
	NewData    whereHelpernull_JSON
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
}{
	ID:         whereHelperstring{field: "\"card_activities\".\"id\""},
	CardID:     whereHelperstring{field: "\"card_activities\".\"card_id\""},
	ActionType: whereHelperCardActionType{field: "\"card_activities\".\"action_type\""},
	OldData:    whereHelpernull_JSON{field: "\"card_activities\".\"old_data\""},
	NewData:    whereHelpernull_JSON{field: "\"card_activities\".\"new_data\""},
	CreatedAt:  whereHelpertime_Time{field: "\"card_activities\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"card_activities\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"card_activities\".\"deleted_at\""},
}

// CardActivityRels is where relationship names are stored.
var CardActivityRels = struct {
	Card string
}{
	Card: "Card",
}

// cardActivityR is where relationships are stored.
type cardActivityR struct {
	Card *Card `boil:"Card" json:"Card" toml:"Card" yaml:"Card"`
}

// NewStruct creates a new relationship struct
func (*cardActivityR) NewStruct() *cardActivityR {
	return &cardActivityR{}
}

func (o *CardActivity) GetCard() *Card {
	if o == nil {
		return nil
	}

	return o.R.GetCard()
}

func (r *cardActivityR) GetCard() *Card {
	if r == nil {
		return nil
	}

	return r.Card
}

// cardActivityL is where Load methods for each relationship are stored.
type cardActivityL struct{}

var (
	cardActivityAllColumns            = []string{"id", "card_id", "action_type", "old_data", "new_data", "created_at", "updated_at", "deleted_at"}
	cardActivityColumnsWithoutDefault = []string{"card_id", "action_type"}
	cardActivityColumnsWithDefault    = []string{"id", "old_data", "new_data", "created_at", "updated_at", "deleted_at"}
	cardActivityPrimaryKeyColumns     = []string{"id"}
	cardActivityGeneratedColumns      = []string{}
)

type (
	// CardActivitySlice is an alias for a slice of pointers to CardActivity.
	// This should almost always be used instead of []CardActivity.
	CardActivitySlice []*CardActivity
	// CardActivityHook is the signature for custom CardActivity hook methods
	CardActivityHook func(context.Context, boil.ContextExecutor, *CardActivity) error

	cardActivityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cardActivityType                 = reflect.TypeOf(&CardActivity{})
	cardActivityMapping              = queries.MakeStructMapping(cardActivityType)
	cardActivityPrimaryKeyMapping, _ = queries.BindMapping(cardActivityType, cardActivityMapping, cardActivityPrimaryKeyColumns)
	cardActivityInsertCacheMut       sync.RWMutex
	cardActivityInsertCache          = make(map[string]insertCache)
	cardActivityUpdateCacheMut       sync.RWMutex
	cardActivityUpdateCache          = make(map[string]updateCache)
	cardActivityUpsertCacheMut       sync.RWMutex
	cardActivityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cardActivityAfterSelectMu sync.Mutex
var cardActivityAfterSelectHooks []CardActivityHook

var cardActivityBeforeInsertMu sync.Mutex
var cardActivityBeforeInsertHooks []CardActivityHook
var cardActivityAfterInsertMu sync.Mutex
var cardActivityAfterInsertHooks []CardActivityHook

var cardActivityBeforeUpdateMu sync.Mutex
var cardActivityBeforeUpdateHooks []CardActivityHook
var cardActivityAfterUpdateMu sync.Mutex
var cardActivityAfterUpdateHooks []CardActivityHook

var cardActivityBeforeDeleteMu sync.Mutex
var cardActivityBeforeDeleteHooks []CardActivityHook
var cardActivityAfterDeleteMu sync.Mutex
var cardActivityAfterDeleteHooks []CardActivityHook

var cardActivityBeforeUpsertMu sync.Mutex
var cardActivityBeforeUpsertHooks []CardActivityHook
var cardActivityAfterUpsertMu sync.Mutex
var cardActivityAfterUpsertHooks []CardActivityHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CardActivity) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CardActivity) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CardActivity) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CardActivity) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CardActivity) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CardActivity) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CardActivity) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CardActivity) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CardActivity) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cardActivityAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCardActivityHook registers your hook function for all future operations.
func AddCardActivityHook(hookPoint boil.HookPoint, cardActivityHook CardActivityHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cardActivityAfterSelectMu.Lock()
		cardActivityAfterSelectHooks = append(cardActivityAfterSelectHooks, cardActivityHook)
		cardActivityAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cardActivityBeforeInsertMu.Lock()
		cardActivityBeforeInsertHooks = append(cardActivityBeforeInsertHooks, cardActivityHook)
		cardActivityBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cardActivityAfterInsertMu.Lock()
		cardActivityAfterInsertHooks = append(cardActivityAfterInsertHooks, cardActivityHook)
		cardActivityAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cardActivityBeforeUpdateMu.Lock()
		cardActivityBeforeUpdateHooks = append(cardActivityBeforeUpdateHooks, cardActivityHook)
		cardActivityBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cardActivityAfterUpdateMu.Lock()
		cardActivityAfterUpdateHooks = append(cardActivityAfterUpdateHooks, cardActivityHook)
		cardActivityAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cardActivityBeforeDeleteMu.Lock()
		cardActivityBeforeDeleteHooks = append(cardActivityBeforeDeleteHooks, cardActivityHook)
		cardActivityBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cardActivityAfterDeleteMu.Lock()
		cardActivityAfterDeleteHooks = append(cardActivityAfterDeleteHooks, cardActivityHook)
		cardActivityAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cardActivityBeforeUpsertMu.Lock()
		cardActivityBeforeUpsertHooks = append(cardActivityBeforeUpsertHooks, cardActivityHook)
		cardActivityBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cardActivityAfterUpsertMu.Lock()
		cardActivityAfterUpsertHooks = append(cardActivityAfterUpsertHooks, cardActivityHook)
		cardActivityAfterUpsertMu.Unlock()
	}
}

// One returns a single cardActivity record from the query.
func (q cardActivityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CardActivity, error) {
	o := &CardActivity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for card_activities")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CardActivity records from the query.
func (q cardActivityQuery) All(ctx context.Context, exec boil.ContextExecutor) (CardActivitySlice, error) {
	var o []*CardActivity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to CardActivity slice")
	}

	if len(cardActivityAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CardActivity records in the query.
func (q cardActivityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count card_activities rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cardActivityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if card_activities exists")
	}

	return count > 0, nil
}

// Card pointed to by the foreign key.
func (o *CardActivity) Card(mods ...qm.QueryMod) cardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CardID),
	}

	queryMods = append(queryMods, mods...)

	return Cards(queryMods...)
}

// LoadCard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cardActivityL) LoadCard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCardActivity interface{}, mods queries.Applicator) error {
	var slice []*CardActivity
	var object *CardActivity

	if singular {
		var ok bool
		object, ok = maybeCardActivity.(*CardActivity)
		if !ok {
			object = new(CardActivity)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCardActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCardActivity))
			}
		}
	} else {
		s, ok := maybeCardActivity.(*[]*CardActivity)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCardActivity)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCardActivity))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cardActivityR{}
		}
		args[object.CardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cardActivityR{}
			}

			args[obj.CardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Card")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Card")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Card = foreign
		if foreign.R == nil {
			foreign.R = &cardR{}
		}
		foreign.R.CardActivities = append(foreign.R.CardActivities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CardID == foreign.ID {
				local.R.Card = foreign
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.CardActivities = append(foreign.R.CardActivities, local)
				break
			}
		}
	}

	return nil
}

// SetCard of the cardActivity to the related item.
// Sets o.R.Card to related.
// Adds o to related.R.CardActivities.
func (o *CardActivity) SetCard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Card) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"card_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"card_id"}),
		strmangle.WhereClause("\"", "\"", 2, cardActivityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CardID = related.ID
	if o.R == nil {
		o.R = &cardActivityR{
			Card: related,
		}
	} else {
		o.R.Card = related
	}

	if related.R == nil {
		related.R = &cardR{
			CardActivities: CardActivitySlice{o},
		}
	} else {
		related.R.CardActivities = append(related.R.CardActivities, o)
	}

	return nil
}

// CardActivities retrieves all the records using an executor.
func CardActivities(mods ...qm.QueryMod) cardActivityQuery {
	mods = append(mods, qm.From("\"card_activities\""), qmhelper.WhereIsNull("\"card_activities\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"card_activities\".*"})
	}

	return cardActivityQuery{q}
}

// FindCardActivity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCardActivity(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CardActivity, error) {
	cardActivityObj := &CardActivity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"card_activities\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cardActivityObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from card_activities")
	}

	if err = cardActivityObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cardActivityObj, err
	}

	return cardActivityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CardActivity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no card_activities provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardActivityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cardActivityInsertCacheMut.RLock()
	cache, cached := cardActivityInsertCache[key]
	cardActivityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cardActivityAllColumns,
			cardActivityColumnsWithDefault,
			cardActivityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cardActivityType, cardActivityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cardActivityType, cardActivityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"card_activities\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"card_activities\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into card_activities")
	}

	if !cached {
		cardActivityInsertCacheMut.Lock()
		cardActivityInsertCache[key] = cache
		cardActivityInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CardActivity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CardActivity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cardActivityUpdateCacheMut.RLock()
	cache, cached := cardActivityUpdateCache[key]
	cardActivityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cardActivityAllColumns,
			cardActivityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update card_activities, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"card_activities\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cardActivityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cardActivityType, cardActivityMapping, append(wl, cardActivityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update card_activities row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for card_activities")
	}

	if !cached {
		cardActivityUpdateCacheMut.Lock()
		cardActivityUpdateCache[key] = cache
		cardActivityUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cardActivityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for card_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for card_activities")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CardActivitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"card_activities\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cardActivityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in cardActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all cardActivity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CardActivity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no card_activities provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cardActivityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cardActivityUpsertCacheMut.RLock()
	cache, cached := cardActivityUpsertCache[key]
	cardActivityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cardActivityAllColumns,
			cardActivityColumnsWithDefault,
			cardActivityColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cardActivityAllColumns,
			cardActivityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert card_activities, could not build update column list")
		}

		ret := strmangle.SetComplement(cardActivityAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cardActivityPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert card_activities, could not build conflict column list")
			}

			conflict = make([]string, len(cardActivityPrimaryKeyColumns))
			copy(conflict, cardActivityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"card_activities\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cardActivityType, cardActivityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cardActivityType, cardActivityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert card_activities")
	}

	if !cached {
		cardActivityUpsertCacheMut.Lock()
		cardActivityUpsertCache[key] = cache
		cardActivityUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CardActivity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CardActivity) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no CardActivity provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cardActivityPrimaryKeyMapping)
		sql = "DELETE FROM \"card_activities\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"card_activities\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(cardActivityType, cardActivityMapping, append(wl, cardActivityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from card_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for card_activities")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cardActivityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no cardActivityQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from card_activities")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for card_activities")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CardActivitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cardActivityBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardActivityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"card_activities\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cardActivityPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardActivityPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"card_activities\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, cardActivityPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from cardActivity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for card_activities")
	}

	if len(cardActivityAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CardActivity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCardActivity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CardActivitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CardActivitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cardActivityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"card_activities\".* FROM \"card_activities\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cardActivityPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in CardActivitySlice")
	}

	*o = slice

	return nil
}

// CardActivityExists checks if the CardActivity row exists.
func CardActivityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"card_activities\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if card_activities exists")
	}

	return exists, nil
}

// Exists checks if the CardActivity row exists.
func (o *CardActivity) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CardActivityExists(ctx, exec, o.ID)
}
