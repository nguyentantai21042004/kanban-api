// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// SystemConfig is an object representing the database table.
type SystemConfig struct {
	Key         string      `boil:"key" json:"key" toml:"key" yaml:"key"`
	Value       types.JSON  `boil:"value" json:"value" toml:"value" yaml:"value"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	UpdatedAt   null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	UpdatedBy   null.String `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`

	R *systemConfigR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L systemConfigL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SystemConfigColumns = struct {
	Key         string
	Value       string
	Description string
	UpdatedAt   string
	UpdatedBy   string
}{
	Key:         "key",
	Value:       "value",
	Description: "description",
	UpdatedAt:   "updated_at",
	UpdatedBy:   "updated_by",
}

var SystemConfigTableColumns = struct {
	Key         string
	Value       string
	Description string
	UpdatedAt   string
	UpdatedBy   string
}{
	Key:         "system_config.key",
	Value:       "system_config.value",
	Description: "system_config.description",
	UpdatedAt:   "system_config.updated_at",
	UpdatedBy:   "system_config.updated_by",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SystemConfigWhere = struct {
	Key         whereHelperstring
	Value       whereHelpertypes_JSON
	Description whereHelpernull_String
	UpdatedAt   whereHelpernull_Time
	UpdatedBy   whereHelpernull_String
}{
	Key:         whereHelperstring{field: "\"system_config\".\"key\""},
	Value:       whereHelpertypes_JSON{field: "\"system_config\".\"value\""},
	Description: whereHelpernull_String{field: "\"system_config\".\"description\""},
	UpdatedAt:   whereHelpernull_Time{field: "\"system_config\".\"updated_at\""},
	UpdatedBy:   whereHelpernull_String{field: "\"system_config\".\"updated_by\""},
}

// SystemConfigRels is where relationship names are stored.
var SystemConfigRels = struct {
	UpdatedByUser string
}{
	UpdatedByUser: "UpdatedByUser",
}

// systemConfigR is where relationships are stored.
type systemConfigR struct {
	UpdatedByUser *User `boil:"UpdatedByUser" json:"UpdatedByUser" toml:"UpdatedByUser" yaml:"UpdatedByUser"`
}

// NewStruct creates a new relationship struct
func (*systemConfigR) NewStruct() *systemConfigR {
	return &systemConfigR{}
}

func (o *SystemConfig) GetUpdatedByUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUpdatedByUser()
}

func (r *systemConfigR) GetUpdatedByUser() *User {
	if r == nil {
		return nil
	}

	return r.UpdatedByUser
}

// systemConfigL is where Load methods for each relationship are stored.
type systemConfigL struct{}

var (
	systemConfigAllColumns            = []string{"key", "value", "description", "updated_at", "updated_by"}
	systemConfigColumnsWithoutDefault = []string{"key", "value"}
	systemConfigColumnsWithDefault    = []string{"description", "updated_at", "updated_by"}
	systemConfigPrimaryKeyColumns     = []string{"key"}
	systemConfigGeneratedColumns      = []string{}
)

type (
	// SystemConfigSlice is an alias for a slice of pointers to SystemConfig.
	// This should almost always be used instead of []SystemConfig.
	SystemConfigSlice []*SystemConfig
	// SystemConfigHook is the signature for custom SystemConfig hook methods
	SystemConfigHook func(context.Context, boil.ContextExecutor, *SystemConfig) error

	systemConfigQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	systemConfigType                 = reflect.TypeOf(&SystemConfig{})
	systemConfigMapping              = queries.MakeStructMapping(systemConfigType)
	systemConfigPrimaryKeyMapping, _ = queries.BindMapping(systemConfigType, systemConfigMapping, systemConfigPrimaryKeyColumns)
	systemConfigInsertCacheMut       sync.RWMutex
	systemConfigInsertCache          = make(map[string]insertCache)
	systemConfigUpdateCacheMut       sync.RWMutex
	systemConfigUpdateCache          = make(map[string]updateCache)
	systemConfigUpsertCacheMut       sync.RWMutex
	systemConfigUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var systemConfigAfterSelectMu sync.Mutex
var systemConfigAfterSelectHooks []SystemConfigHook

var systemConfigBeforeInsertMu sync.Mutex
var systemConfigBeforeInsertHooks []SystemConfigHook
var systemConfigAfterInsertMu sync.Mutex
var systemConfigAfterInsertHooks []SystemConfigHook

var systemConfigBeforeUpdateMu sync.Mutex
var systemConfigBeforeUpdateHooks []SystemConfigHook
var systemConfigAfterUpdateMu sync.Mutex
var systemConfigAfterUpdateHooks []SystemConfigHook

var systemConfigBeforeDeleteMu sync.Mutex
var systemConfigBeforeDeleteHooks []SystemConfigHook
var systemConfigAfterDeleteMu sync.Mutex
var systemConfigAfterDeleteHooks []SystemConfigHook

var systemConfigBeforeUpsertMu sync.Mutex
var systemConfigBeforeUpsertHooks []SystemConfigHook
var systemConfigAfterUpsertMu sync.Mutex
var systemConfigAfterUpsertHooks []SystemConfigHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SystemConfig) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SystemConfig) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SystemConfig) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SystemConfig) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SystemConfig) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SystemConfig) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SystemConfig) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SystemConfig) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SystemConfig) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range systemConfigAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSystemConfigHook registers your hook function for all future operations.
func AddSystemConfigHook(hookPoint boil.HookPoint, systemConfigHook SystemConfigHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		systemConfigAfterSelectMu.Lock()
		systemConfigAfterSelectHooks = append(systemConfigAfterSelectHooks, systemConfigHook)
		systemConfigAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		systemConfigBeforeInsertMu.Lock()
		systemConfigBeforeInsertHooks = append(systemConfigBeforeInsertHooks, systemConfigHook)
		systemConfigBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		systemConfigAfterInsertMu.Lock()
		systemConfigAfterInsertHooks = append(systemConfigAfterInsertHooks, systemConfigHook)
		systemConfigAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		systemConfigBeforeUpdateMu.Lock()
		systemConfigBeforeUpdateHooks = append(systemConfigBeforeUpdateHooks, systemConfigHook)
		systemConfigBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		systemConfigAfterUpdateMu.Lock()
		systemConfigAfterUpdateHooks = append(systemConfigAfterUpdateHooks, systemConfigHook)
		systemConfigAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		systemConfigBeforeDeleteMu.Lock()
		systemConfigBeforeDeleteHooks = append(systemConfigBeforeDeleteHooks, systemConfigHook)
		systemConfigBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		systemConfigAfterDeleteMu.Lock()
		systemConfigAfterDeleteHooks = append(systemConfigAfterDeleteHooks, systemConfigHook)
		systemConfigAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		systemConfigBeforeUpsertMu.Lock()
		systemConfigBeforeUpsertHooks = append(systemConfigBeforeUpsertHooks, systemConfigHook)
		systemConfigBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		systemConfigAfterUpsertMu.Lock()
		systemConfigAfterUpsertHooks = append(systemConfigAfterUpsertHooks, systemConfigHook)
		systemConfigAfterUpsertMu.Unlock()
	}
}

// One returns a single systemConfig record from the query.
func (q systemConfigQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SystemConfig, error) {
	o := &SystemConfig{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for system_config")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SystemConfig records from the query.
func (q systemConfigQuery) All(ctx context.Context, exec boil.ContextExecutor) (SystemConfigSlice, error) {
	var o []*SystemConfig

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to SystemConfig slice")
	}

	if len(systemConfigAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SystemConfig records in the query.
func (q systemConfigQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count system_config rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q systemConfigQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if system_config exists")
	}

	return count > 0, nil
}

// UpdatedByUser pointed to by the foreign key.
func (o *SystemConfig) UpdatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUpdatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (systemConfigL) LoadUpdatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSystemConfig interface{}, mods queries.Applicator) error {
	var slice []*SystemConfig
	var object *SystemConfig

	if singular {
		var ok bool
		object, ok = maybeSystemConfig.(*SystemConfig)
		if !ok {
			object = new(SystemConfig)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSystemConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSystemConfig))
			}
		}
	} else {
		s, ok := maybeSystemConfig.(*[]*SystemConfig)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSystemConfig)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSystemConfig))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &systemConfigR{}
		}
		if !queries.IsNil(object.UpdatedBy) {
			args[object.UpdatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &systemConfigR{}
			}

			if !queries.IsNil(obj.UpdatedBy) {
				args[obj.UpdatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedBySystemConfigs = append(foreign.R.UpdatedBySystemConfigs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UpdatedBy, foreign.ID) {
				local.R.UpdatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedBySystemConfigs = append(foreign.R.UpdatedBySystemConfigs, local)
				break
			}
		}
	}

	return nil
}

// SetUpdatedByUser of the systemConfig to the related item.
// Sets o.R.UpdatedByUser to related.
// Adds o to related.R.UpdatedBySystemConfigs.
func (o *SystemConfig) SetUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"system_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by"}),
		strmangle.WhereClause("\"", "\"", 2, systemConfigPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Key}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UpdatedBy, related.ID)
	if o.R == nil {
		o.R = &systemConfigR{
			UpdatedByUser: related,
		}
	} else {
		o.R.UpdatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedBySystemConfigs: SystemConfigSlice{o},
		}
	} else {
		related.R.UpdatedBySystemConfigs = append(related.R.UpdatedBySystemConfigs, o)
	}

	return nil
}

// RemoveUpdatedByUser relationship.
// Sets o.R.UpdatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SystemConfig) RemoveUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UpdatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("updated_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UpdatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UpdatedBySystemConfigs {
		if queries.Equal(o.UpdatedBy, ri.UpdatedBy) {
			continue
		}

		ln := len(related.R.UpdatedBySystemConfigs)
		if ln > 1 && i < ln-1 {
			related.R.UpdatedBySystemConfigs[i] = related.R.UpdatedBySystemConfigs[ln-1]
		}
		related.R.UpdatedBySystemConfigs = related.R.UpdatedBySystemConfigs[:ln-1]
		break
	}
	return nil
}

// SystemConfigs retrieves all the records using an executor.
func SystemConfigs(mods ...qm.QueryMod) systemConfigQuery {
	mods = append(mods, qm.From("\"system_config\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"system_config\".*"})
	}

	return systemConfigQuery{q}
}

// FindSystemConfig retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSystemConfig(ctx context.Context, exec boil.ContextExecutor, key string, selectCols ...string) (*SystemConfig, error) {
	systemConfigObj := &SystemConfig{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"system_config\" where \"key\"=$1", sel,
	)

	q := queries.Raw(query, key)

	err := q.Bind(ctx, exec, systemConfigObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from system_config")
	}

	if err = systemConfigObj.doAfterSelectHooks(ctx, exec); err != nil {
		return systemConfigObj, err
	}

	return systemConfigObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SystemConfig) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no system_config provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemConfigColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	systemConfigInsertCacheMut.RLock()
	cache, cached := systemConfigInsertCache[key]
	systemConfigInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			systemConfigAllColumns,
			systemConfigColumnsWithDefault,
			systemConfigColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(systemConfigType, systemConfigMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(systemConfigType, systemConfigMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"system_config\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"system_config\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into system_config")
	}

	if !cached {
		systemConfigInsertCacheMut.Lock()
		systemConfigInsertCache[key] = cache
		systemConfigInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SystemConfig.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SystemConfig) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	systemConfigUpdateCacheMut.RLock()
	cache, cached := systemConfigUpdateCache[key]
	systemConfigUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			systemConfigAllColumns,
			systemConfigPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update system_config, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"system_config\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, systemConfigPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(systemConfigType, systemConfigMapping, append(wl, systemConfigPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update system_config row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for system_config")
	}

	if !cached {
		systemConfigUpdateCacheMut.Lock()
		systemConfigUpdateCache[key] = cache
		systemConfigUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q systemConfigQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for system_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for system_config")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SystemConfigSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"system_config\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, systemConfigPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in systemConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all systemConfig")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SystemConfig) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no system_config provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(systemConfigColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	systemConfigUpsertCacheMut.RLock()
	cache, cached := systemConfigUpsertCache[key]
	systemConfigUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			systemConfigAllColumns,
			systemConfigColumnsWithDefault,
			systemConfigColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			systemConfigAllColumns,
			systemConfigPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert system_config, could not build update column list")
		}

		ret := strmangle.SetComplement(systemConfigAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(systemConfigPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert system_config, could not build conflict column list")
			}

			conflict = make([]string, len(systemConfigPrimaryKeyColumns))
			copy(conflict, systemConfigPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"system_config\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(systemConfigType, systemConfigMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(systemConfigType, systemConfigMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert system_config")
	}

	if !cached {
		systemConfigUpsertCacheMut.Lock()
		systemConfigUpsertCache[key] = cache
		systemConfigUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SystemConfig record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SystemConfig) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no SystemConfig provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), systemConfigPrimaryKeyMapping)
	sql := "DELETE FROM \"system_config\" WHERE \"key\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from system_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for system_config")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q systemConfigQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no systemConfigQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from system_config")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for system_config")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SystemConfigSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(systemConfigBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"system_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemConfigPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from systemConfig slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for system_config")
	}

	if len(systemConfigAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SystemConfig) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSystemConfig(ctx, exec, o.Key)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SystemConfigSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SystemConfigSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), systemConfigPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"system_config\".* FROM \"system_config\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, systemConfigPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in SystemConfigSlice")
	}

	*o = slice

	return nil
}

// SystemConfigExists checks if the SystemConfig row exists.
func SystemConfigExists(ctx context.Context, exec boil.ContextExecutor, key string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"system_config\" where \"key\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, key)
	}
	row := exec.QueryRowContext(ctx, sql, key)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if system_config exists")
	}

	return exists, nil
}

// Exists checks if the SystemConfig row exists.
func (o *SystemConfig) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SystemConfigExists(ctx, exec, o.Key)
}
