// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Upload is an object representing the database table.
type Upload struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BucketName    string      `boil:"bucket_name" json:"bucket_name" toml:"bucket_name" yaml:"bucket_name"`
	ObjectName    string      `boil:"object_name" json:"object_name" toml:"object_name" yaml:"object_name"`
	OriginalName  string      `boil:"original_name" json:"original_name" toml:"original_name" yaml:"original_name"`
	Size          int64       `boil:"size" json:"size" toml:"size" yaml:"size"`
	ContentType   string      `boil:"content_type" json:"content_type" toml:"content_type" yaml:"content_type"`
	Etag          null.String `boil:"etag" json:"etag,omitempty" toml:"etag" yaml:"etag,omitempty"`
	Metadata      null.JSON   `boil:"metadata" json:"metadata,omitempty" toml:"metadata" yaml:"metadata,omitempty"`
	URL           null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Source        string      `boil:"source" json:"source" toml:"source" yaml:"source"`
	PublicID      null.String `boil:"public_id" json:"public_id,omitempty" toml:"public_id" yaml:"public_id,omitempty"`
	CreatedUserID string      `boil:"created_user_id" json:"created_user_id" toml:"created_user_id" yaml:"created_user_id"`
	CreatedAt     time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *uploadR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadColumns = struct {
	ID            string
	BucketName    string
	ObjectName    string
	OriginalName  string
	Size          string
	ContentType   string
	Etag          string
	Metadata      string
	URL           string
	Source        string
	PublicID      string
	CreatedUserID string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	BucketName:    "bucket_name",
	ObjectName:    "object_name",
	OriginalName:  "original_name",
	Size:          "size",
	ContentType:   "content_type",
	Etag:          "etag",
	Metadata:      "metadata",
	URL:           "url",
	Source:        "source",
	PublicID:      "public_id",
	CreatedUserID: "created_user_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
}

var UploadTableColumns = struct {
	ID            string
	BucketName    string
	ObjectName    string
	OriginalName  string
	Size          string
	ContentType   string
	Etag          string
	Metadata      string
	URL           string
	Source        string
	PublicID      string
	CreatedUserID string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
}{
	ID:            "uploads.id",
	BucketName:    "uploads.bucket_name",
	ObjectName:    "uploads.object_name",
	OriginalName:  "uploads.original_name",
	Size:          "uploads.size",
	ContentType:   "uploads.content_type",
	Etag:          "uploads.etag",
	Metadata:      "uploads.metadata",
	URL:           "uploads.url",
	Source:        "uploads.source",
	PublicID:      "uploads.public_id",
	CreatedUserID: "uploads.created_user_id",
	CreatedAt:     "uploads.created_at",
	UpdatedAt:     "uploads.updated_at",
	DeletedAt:     "uploads.deleted_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UploadWhere = struct {
	ID            whereHelperstring
	BucketName    whereHelperstring
	ObjectName    whereHelperstring
	OriginalName  whereHelperstring
	Size          whereHelperint64
	ContentType   whereHelperstring
	Etag          whereHelpernull_String
	Metadata      whereHelpernull_JSON
	URL           whereHelpernull_String
	Source        whereHelperstring
	PublicID      whereHelpernull_String
	CreatedUserID whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
}{
	ID:            whereHelperstring{field: "\"uploads\".\"id\""},
	BucketName:    whereHelperstring{field: "\"uploads\".\"bucket_name\""},
	ObjectName:    whereHelperstring{field: "\"uploads\".\"object_name\""},
	OriginalName:  whereHelperstring{field: "\"uploads\".\"original_name\""},
	Size:          whereHelperint64{field: "\"uploads\".\"size\""},
	ContentType:   whereHelperstring{field: "\"uploads\".\"content_type\""},
	Etag:          whereHelpernull_String{field: "\"uploads\".\"etag\""},
	Metadata:      whereHelpernull_JSON{field: "\"uploads\".\"metadata\""},
	URL:           whereHelpernull_String{field: "\"uploads\".\"url\""},
	Source:        whereHelperstring{field: "\"uploads\".\"source\""},
	PublicID:      whereHelpernull_String{field: "\"uploads\".\"public_id\""},
	CreatedUserID: whereHelperstring{field: "\"uploads\".\"created_user_id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"uploads\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"uploads\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"uploads\".\"deleted_at\""},
}

// UploadRels is where relationship names are stored.
var UploadRels = struct {
	CreatedUser string
}{
	CreatedUser: "CreatedUser",
}

// uploadR is where relationships are stored.
type uploadR struct {
	CreatedUser *User `boil:"CreatedUser" json:"CreatedUser" toml:"CreatedUser" yaml:"CreatedUser"`
}

// NewStruct creates a new relationship struct
func (*uploadR) NewStruct() *uploadR {
	return &uploadR{}
}

func (o *Upload) GetCreatedUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedUser()
}

func (r *uploadR) GetCreatedUser() *User {
	if r == nil {
		return nil
	}

	return r.CreatedUser
}

// uploadL is where Load methods for each relationship are stored.
type uploadL struct{}

var (
	uploadAllColumns            = []string{"id", "bucket_name", "object_name", "original_name", "size", "content_type", "etag", "metadata", "url", "source", "public_id", "created_user_id", "created_at", "updated_at", "deleted_at"}
	uploadColumnsWithoutDefault = []string{"bucket_name", "object_name", "original_name", "size", "content_type", "source", "created_user_id"}
	uploadColumnsWithDefault    = []string{"id", "etag", "metadata", "url", "public_id", "created_at", "updated_at", "deleted_at"}
	uploadPrimaryKeyColumns     = []string{"id"}
	uploadGeneratedColumns      = []string{}
)

type (
	// UploadSlice is an alias for a slice of pointers to Upload.
	// This should almost always be used instead of []Upload.
	UploadSlice []*Upload
	// UploadHook is the signature for custom Upload hook methods
	UploadHook func(context.Context, boil.ContextExecutor, *Upload) error

	uploadQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadType                 = reflect.TypeOf(&Upload{})
	uploadMapping              = queries.MakeStructMapping(uploadType)
	uploadPrimaryKeyMapping, _ = queries.BindMapping(uploadType, uploadMapping, uploadPrimaryKeyColumns)
	uploadInsertCacheMut       sync.RWMutex
	uploadInsertCache          = make(map[string]insertCache)
	uploadUpdateCacheMut       sync.RWMutex
	uploadUpdateCache          = make(map[string]updateCache)
	uploadUpsertCacheMut       sync.RWMutex
	uploadUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var uploadAfterSelectMu sync.Mutex
var uploadAfterSelectHooks []UploadHook

var uploadBeforeInsertMu sync.Mutex
var uploadBeforeInsertHooks []UploadHook
var uploadAfterInsertMu sync.Mutex
var uploadAfterInsertHooks []UploadHook

var uploadBeforeUpdateMu sync.Mutex
var uploadBeforeUpdateHooks []UploadHook
var uploadAfterUpdateMu sync.Mutex
var uploadAfterUpdateHooks []UploadHook

var uploadBeforeDeleteMu sync.Mutex
var uploadBeforeDeleteHooks []UploadHook
var uploadAfterDeleteMu sync.Mutex
var uploadAfterDeleteHooks []UploadHook

var uploadBeforeUpsertMu sync.Mutex
var uploadBeforeUpsertHooks []UploadHook
var uploadAfterUpsertMu sync.Mutex
var uploadAfterUpsertHooks []UploadHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Upload) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Upload) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Upload) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Upload) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Upload) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Upload) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Upload) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Upload) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Upload) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range uploadAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUploadHook registers your hook function for all future operations.
func AddUploadHook(hookPoint boil.HookPoint, uploadHook UploadHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		uploadAfterSelectMu.Lock()
		uploadAfterSelectHooks = append(uploadAfterSelectHooks, uploadHook)
		uploadAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		uploadBeforeInsertMu.Lock()
		uploadBeforeInsertHooks = append(uploadBeforeInsertHooks, uploadHook)
		uploadBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		uploadAfterInsertMu.Lock()
		uploadAfterInsertHooks = append(uploadAfterInsertHooks, uploadHook)
		uploadAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		uploadBeforeUpdateMu.Lock()
		uploadBeforeUpdateHooks = append(uploadBeforeUpdateHooks, uploadHook)
		uploadBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		uploadAfterUpdateMu.Lock()
		uploadAfterUpdateHooks = append(uploadAfterUpdateHooks, uploadHook)
		uploadAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		uploadBeforeDeleteMu.Lock()
		uploadBeforeDeleteHooks = append(uploadBeforeDeleteHooks, uploadHook)
		uploadBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		uploadAfterDeleteMu.Lock()
		uploadAfterDeleteHooks = append(uploadAfterDeleteHooks, uploadHook)
		uploadAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		uploadBeforeUpsertMu.Lock()
		uploadBeforeUpsertHooks = append(uploadBeforeUpsertHooks, uploadHook)
		uploadBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		uploadAfterUpsertMu.Lock()
		uploadAfterUpsertHooks = append(uploadAfterUpsertHooks, uploadHook)
		uploadAfterUpsertMu.Unlock()
	}
}

// One returns a single upload record from the query.
func (q uploadQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Upload, error) {
	o := &Upload{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for uploads")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Upload records from the query.
func (q uploadQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadSlice, error) {
	var o []*Upload

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Upload slice")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Upload records in the query.
func (q uploadQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count uploads rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if uploads exists")
	}

	return count > 0, nil
}

// CreatedUser pointed to by the foreign key.
func (o *Upload) CreatedUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedUserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCreatedUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (uploadL) LoadCreatedUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUpload interface{}, mods queries.Applicator) error {
	var slice []*Upload
	var object *Upload

	if singular {
		var ok bool
		object, ok = maybeUpload.(*Upload)
		if !ok {
			object = new(Upload)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUpload))
			}
		}
	} else {
		s, ok := maybeUpload.(*[]*Upload)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUpload)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUpload))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadR{}
		}
		args[object.CreatedUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadR{}
			}

			args[obj.CreatedUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedUserUploads = append(foreign.R.CreatedUserUploads, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedUserID == foreign.ID {
				local.R.CreatedUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedUserUploads = append(foreign.R.CreatedUserUploads, local)
				break
			}
		}
	}

	return nil
}

// SetCreatedUser of the upload to the related item.
// Sets o.R.CreatedUser to related.
// Adds o to related.R.CreatedUserUploads.
func (o *Upload) SetCreatedUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, uploadPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedUserID = related.ID
	if o.R == nil {
		o.R = &uploadR{
			CreatedUser: related,
		}
	} else {
		o.R.CreatedUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedUserUploads: UploadSlice{o},
		}
	} else {
		related.R.CreatedUserUploads = append(related.R.CreatedUserUploads, o)
	}

	return nil
}

// Uploads retrieves all the records using an executor.
func Uploads(mods ...qm.QueryMod) uploadQuery {
	mods = append(mods, qm.From("\"uploads\""), qmhelper.WhereIsNull("\"uploads\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"uploads\".*"})
	}

	return uploadQuery{q}
}

// FindUpload retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUpload(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Upload, error) {
	uploadObj := &Upload{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"uploads\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uploadObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from uploads")
	}

	if err = uploadObj.doAfterSelectHooks(ctx, exec); err != nil {
		return uploadObj, err
	}

	return uploadObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Upload) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no uploads provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadInsertCacheMut.RLock()
	cache, cached := uploadInsertCache[key]
	uploadInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"uploads\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"uploads\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into uploads")
	}

	if !cached {
		uploadInsertCacheMut.Lock()
		uploadInsertCache[key] = cache
		uploadInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Upload.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Upload) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	uploadUpdateCacheMut.RLock()
	cache, cached := uploadUpdateCache[key]
	uploadUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update uploads, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, append(wl, uploadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update uploads row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for uploads")
	}

	if !cached {
		uploadUpdateCacheMut.Lock()
		uploadUpdateCache[key] = cache
		uploadUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q uploadQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for uploads")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all upload")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Upload) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no uploads provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadUpsertCacheMut.RLock()
	cache, cached := uploadUpsertCache[key]
	uploadUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			uploadAllColumns,
			uploadColumnsWithDefault,
			uploadColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadAllColumns,
			uploadPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert uploads, could not build update column list")
		}

		ret := strmangle.SetComplement(uploadAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(uploadPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert uploads, could not build conflict column list")
			}

			conflict = make([]string, len(uploadPrimaryKeyColumns))
			copy(conflict, uploadPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"uploads\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(uploadType, uploadMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadType, uploadMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert uploads")
	}

	if !cached {
		uploadUpsertCacheMut.Lock()
		uploadUpsertCache[key] = cache
		uploadUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Upload record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Upload) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Upload provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadPrimaryKeyMapping)
		sql = "DELETE FROM \"uploads\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(uploadType, uploadMapping, append(wl, uploadPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for uploads")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no uploadQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from uploads")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for uploads")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(uploadBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"uploads\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"uploads\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, uploadPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from upload slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for uploads")
	}

	if len(uploadAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Upload) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUpload(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"uploads\".* FROM \"uploads\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in UploadSlice")
	}

	*o = slice

	return nil
}

// UploadExists checks if the Upload row exists.
func UploadExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"uploads\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if uploads exists")
	}

	return exists, nil
}

// Exists checks if the Upload row exists.
func (o *Upload) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadExists(ctx, exec, o.ID)
}
