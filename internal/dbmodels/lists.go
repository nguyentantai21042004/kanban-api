// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// List is an object representing the database table.
type List struct {
	ID         string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	BoardID    string        `boil:"board_id" json:"board_id" toml:"board_id" yaml:"board_id"`
	Name       string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Position   types.Decimal `boil:"position" json:"position" toml:"position" yaml:"position"`
	IsArchived bool          `boil:"is_archived" json:"is_archived" toml:"is_archived" yaml:"is_archived"`
	CreatedAt  time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time     `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CreatedBy  null.String   `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`

	R *listR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L listL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ListColumns = struct {
	ID         string
	BoardID    string
	Name       string
	Position   string
	IsArchived string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
	CreatedBy  string
}{
	ID:         "id",
	BoardID:    "board_id",
	Name:       "name",
	Position:   "position",
	IsArchived: "is_archived",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
	CreatedBy:  "created_by",
}

var ListTableColumns = struct {
	ID         string
	BoardID    string
	Name       string
	Position   string
	IsArchived string
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
	CreatedBy  string
}{
	ID:         "lists.id",
	BoardID:    "lists.board_id",
	Name:       "lists.name",
	Position:   "lists.position",
	IsArchived: "lists.is_archived",
	CreatedAt:  "lists.created_at",
	UpdatedAt:  "lists.updated_at",
	DeletedAt:  "lists.deleted_at",
	CreatedBy:  "lists.created_by",
}

// Generated where

var ListWhere = struct {
	ID         whereHelperstring
	BoardID    whereHelperstring
	Name       whereHelperstring
	Position   whereHelpertypes_Decimal
	IsArchived whereHelperbool
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
	CreatedBy  whereHelpernull_String
}{
	ID:         whereHelperstring{field: "\"lists\".\"id\""},
	BoardID:    whereHelperstring{field: "\"lists\".\"board_id\""},
	Name:       whereHelperstring{field: "\"lists\".\"name\""},
	Position:   whereHelpertypes_Decimal{field: "\"lists\".\"position\""},
	IsArchived: whereHelperbool{field: "\"lists\".\"is_archived\""},
	CreatedAt:  whereHelpertime_Time{field: "\"lists\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"lists\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"lists\".\"deleted_at\""},
	CreatedBy:  whereHelpernull_String{field: "\"lists\".\"created_by\""},
}

// ListRels is where relationship names are stored.
var ListRels = struct {
	Board         string
	CreatedByUser string
	Cards         string
}{
	Board:         "Board",
	CreatedByUser: "CreatedByUser",
	Cards:         "Cards",
}

// listR is where relationships are stored.
type listR struct {
	Board         *Board    `boil:"Board" json:"Board" toml:"Board" yaml:"Board"`
	CreatedByUser *User     `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	Cards         CardSlice `boil:"Cards" json:"Cards" toml:"Cards" yaml:"Cards"`
}

// NewStruct creates a new relationship struct
func (*listR) NewStruct() *listR {
	return &listR{}
}

func (o *List) GetBoard() *Board {
	if o == nil {
		return nil
	}

	return o.R.GetBoard()
}

func (r *listR) GetBoard() *Board {
	if r == nil {
		return nil
	}

	return r.Board
}

func (o *List) GetCreatedByUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetCreatedByUser()
}

func (r *listR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}

	return r.CreatedByUser
}

func (o *List) GetCards() CardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetCards()
}

func (r *listR) GetCards() CardSlice {
	if r == nil {
		return nil
	}

	return r.Cards
}

// listL is where Load methods for each relationship are stored.
type listL struct{}

var (
	listAllColumns            = []string{"id", "board_id", "name", "position", "is_archived", "created_at", "updated_at", "deleted_at", "created_by"}
	listColumnsWithoutDefault = []string{"board_id", "name", "position"}
	listColumnsWithDefault    = []string{"id", "is_archived", "created_at", "updated_at", "deleted_at", "created_by"}
	listPrimaryKeyColumns     = []string{"id"}
	listGeneratedColumns      = []string{}
)

type (
	// ListSlice is an alias for a slice of pointers to List.
	// This should almost always be used instead of []List.
	ListSlice []*List
	// ListHook is the signature for custom List hook methods
	ListHook func(context.Context, boil.ContextExecutor, *List) error

	listQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	listType                 = reflect.TypeOf(&List{})
	listMapping              = queries.MakeStructMapping(listType)
	listPrimaryKeyMapping, _ = queries.BindMapping(listType, listMapping, listPrimaryKeyColumns)
	listInsertCacheMut       sync.RWMutex
	listInsertCache          = make(map[string]insertCache)
	listUpdateCacheMut       sync.RWMutex
	listUpdateCache          = make(map[string]updateCache)
	listUpsertCacheMut       sync.RWMutex
	listUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var listAfterSelectMu sync.Mutex
var listAfterSelectHooks []ListHook

var listBeforeInsertMu sync.Mutex
var listBeforeInsertHooks []ListHook
var listAfterInsertMu sync.Mutex
var listAfterInsertHooks []ListHook

var listBeforeUpdateMu sync.Mutex
var listBeforeUpdateHooks []ListHook
var listAfterUpdateMu sync.Mutex
var listAfterUpdateHooks []ListHook

var listBeforeDeleteMu sync.Mutex
var listBeforeDeleteHooks []ListHook
var listAfterDeleteMu sync.Mutex
var listAfterDeleteHooks []ListHook

var listBeforeUpsertMu sync.Mutex
var listBeforeUpsertHooks []ListHook
var listAfterUpsertMu sync.Mutex
var listAfterUpsertHooks []ListHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *List) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *List) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *List) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *List) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *List) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *List) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *List) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *List) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *List) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range listAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddListHook registers your hook function for all future operations.
func AddListHook(hookPoint boil.HookPoint, listHook ListHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		listAfterSelectMu.Lock()
		listAfterSelectHooks = append(listAfterSelectHooks, listHook)
		listAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		listBeforeInsertMu.Lock()
		listBeforeInsertHooks = append(listBeforeInsertHooks, listHook)
		listBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		listAfterInsertMu.Lock()
		listAfterInsertHooks = append(listAfterInsertHooks, listHook)
		listAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		listBeforeUpdateMu.Lock()
		listBeforeUpdateHooks = append(listBeforeUpdateHooks, listHook)
		listBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		listAfterUpdateMu.Lock()
		listAfterUpdateHooks = append(listAfterUpdateHooks, listHook)
		listAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		listBeforeDeleteMu.Lock()
		listBeforeDeleteHooks = append(listBeforeDeleteHooks, listHook)
		listBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		listAfterDeleteMu.Lock()
		listAfterDeleteHooks = append(listAfterDeleteHooks, listHook)
		listAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		listBeforeUpsertMu.Lock()
		listBeforeUpsertHooks = append(listBeforeUpsertHooks, listHook)
		listBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		listAfterUpsertMu.Lock()
		listAfterUpsertHooks = append(listAfterUpsertHooks, listHook)
		listAfterUpsertMu.Unlock()
	}
}

// One returns a single list record from the query.
func (q listQuery) One(ctx context.Context, exec boil.ContextExecutor) (*List, error) {
	o := &List{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for lists")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all List records from the query.
func (q listQuery) All(ctx context.Context, exec boil.ContextExecutor) (ListSlice, error) {
	var o []*List

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to List slice")
	}

	if len(listAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all List records in the query.
func (q listQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count lists rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q listQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if lists exists")
	}

	return count > 0, nil
}

// Board pointed to by the foreign key.
func (o *List) Board(mods ...qm.QueryMod) boardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BoardID),
	}

	queryMods = append(queryMods, mods...)

	return Boards(queryMods...)
}

// CreatedByUser pointed to by the foreign key.
func (o *List) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Cards retrieves all the card's Cards with an executor.
func (o *List) Cards(mods ...qm.QueryMod) cardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cards\".\"list_id\"=?", o.ID),
	)

	return Cards(queryMods...)
}

// LoadBoard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (listL) LoadBoard(ctx context.Context, e boil.ContextExecutor, singular bool, maybeList interface{}, mods queries.Applicator) error {
	var slice []*List
	var object *List

	if singular {
		var ok bool
		object, ok = maybeList.(*List)
		if !ok {
			object = new(List)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeList))
			}
		}
	} else {
		s, ok := maybeList.(*[]*List)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeList))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &listR{}
		}
		args[object.BoardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listR{}
			}

			args[obj.BoardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`boards`),
		qm.WhereIn(`boards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`boards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Board")
	}

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Board")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for boards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for boards")
	}

	if len(boardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Board = foreign
		if foreign.R == nil {
			foreign.R = &boardR{}
		}
		foreign.R.Lists = append(foreign.R.Lists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BoardID == foreign.ID {
				local.R.Board = foreign
				if foreign.R == nil {
					foreign.R = &boardR{}
				}
				foreign.R.Lists = append(foreign.R.Lists, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (listL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeList interface{}, mods queries.Applicator) error {
	var slice []*List
	var object *List

	if singular {
		var ok bool
		object, ok = maybeList.(*List)
		if !ok {
			object = new(List)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeList))
			}
		}
	} else {
		s, ok := maybeList.(*[]*List)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeList))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &listR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args[object.CreatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listR{}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args[obj.CreatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`users.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByLists = append(foreign.R.CreatedByLists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByLists = append(foreign.R.CreatedByLists, local)
				break
			}
		}
	}

	return nil
}

// LoadCards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (listL) LoadCards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeList interface{}, mods queries.Applicator) error {
	var slice []*List
	var object *List

	if singular {
		var ok bool
		object, ok = maybeList.(*List)
		if !ok {
			object = new(List)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeList))
			}
		}
	} else {
		s, ok := maybeList.(*[]*List)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeList)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeList))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &listR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &listR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`cards`),
		qm.WhereIn(`cards.list_id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`cards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cards")
	}

	var resultSlice []*Card
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cards")
	}

	if len(cardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Cards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cardR{}
			}
			foreign.R.List = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ListID {
				local.R.Cards = append(local.R.Cards, foreign)
				if foreign.R == nil {
					foreign.R = &cardR{}
				}
				foreign.R.List = local
				break
			}
		}
	}

	return nil
}

// SetBoard of the list to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.Lists.
func (o *List) SetBoard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Board) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"board_id"}),
		strmangle.WhereClause("\"", "\"", 2, listPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BoardID = related.ID
	if o.R == nil {
		o.R = &listR{
			Board: related,
		}
	} else {
		o.R.Board = related
	}

	if related.R == nil {
		related.R = &boardR{
			Lists: ListSlice{o},
		}
	} else {
		related.R.Lists = append(related.R.Lists, o)
	}

	return nil
}

// SetCreatedByUser of the list to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByLists.
func (o *List) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by"}),
		strmangle.WhereClause("\"", "\"", 2, listPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &listR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByLists: ListSlice{o},
		}
	} else {
		related.R.CreatedByLists = append(related.R.CreatedByLists, o)
	}

	return nil
}

// RemoveCreatedByUser relationship.
// Sets o.R.CreatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *List) RemoveCreatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByLists {
		if queries.Equal(o.CreatedBy, ri.CreatedBy) {
			continue
		}

		ln := len(related.R.CreatedByLists)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByLists[i] = related.R.CreatedByLists[ln-1]
		}
		related.R.CreatedByLists = related.R.CreatedByLists[:ln-1]
		break
	}
	return nil
}

// AddCards adds the given related objects to the existing relationships
// of the list, optionally inserting them as new records.
// Appends related to o.R.Cards.
// Sets related.R.List appropriately.
func (o *List) AddCards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Card) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ListID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"list_id"}),
				strmangle.WhereClause("\"", "\"", 2, cardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ListID = o.ID
		}
	}

	if o.R == nil {
		o.R = &listR{
			Cards: related,
		}
	} else {
		o.R.Cards = append(o.R.Cards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cardR{
				List: o,
			}
		} else {
			rel.R.List = o
		}
	}
	return nil
}

// Lists retrieves all the records using an executor.
func Lists(mods ...qm.QueryMod) listQuery {
	mods = append(mods, qm.From("\"lists\""), qmhelper.WhereIsNull("\"lists\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lists\".*"})
	}

	return listQuery{q}
}

// FindList retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindList(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*List, error) {
	listObj := &List{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lists\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, listObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from lists")
	}

	if err = listObj.doAfterSelectHooks(ctx, exec); err != nil {
		return listObj, err
	}

	return listObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *List) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no lists provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	listInsertCacheMut.RLock()
	cache, cached := listInsertCache[key]
	listInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			listAllColumns,
			listColumnsWithDefault,
			listColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(listType, listMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(listType, listMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lists\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lists\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into lists")
	}

	if !cached {
		listInsertCacheMut.Lock()
		listInsertCache[key] = cache
		listInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the List.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *List) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	listUpdateCacheMut.RLock()
	cache, cached := listUpdateCache[key]
	listUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			listAllColumns,
			listPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update lists, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lists\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, listPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(listType, listMapping, append(wl, listPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update lists row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for lists")
	}

	if !cached {
		listUpdateCacheMut.Lock()
		listUpdateCache[key] = cache
		listUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q listQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for lists")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ListSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lists\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, listPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in list slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all list")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *List) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no lists provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(listColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	listUpsertCacheMut.RLock()
	cache, cached := listUpsertCache[key]
	listUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			listAllColumns,
			listColumnsWithDefault,
			listColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			listAllColumns,
			listPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert lists, could not build update column list")
		}

		ret := strmangle.SetComplement(listAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(listPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert lists, could not build conflict column list")
			}

			conflict = make([]string, len(listPrimaryKeyColumns))
			copy(conflict, listPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lists\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(listType, listMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(listType, listMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert lists")
	}

	if !cached {
		listUpsertCacheMut.Lock()
		listUpsertCache[key] = cache
		listUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single List record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *List) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no List provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), listPrimaryKeyMapping)
		sql = "DELETE FROM \"lists\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lists\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(listType, listMapping, append(wl, listPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for lists")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q listQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no listQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from lists")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for lists")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ListSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(listBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"lists\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lists\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, listPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from list slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for lists")
	}

	if len(listAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *List) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindList(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ListSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ListSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), listPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lists\".* FROM \"lists\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, listPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ListSlice")
	}

	*o = slice

	return nil
}

// ListExists checks if the List row exists.
func ListExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lists\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if lists exists")
	}

	return exists, nil
}

// Exists checks if the List row exists.
func (o *List) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ListExists(ctx, exec, o.ID)
}
