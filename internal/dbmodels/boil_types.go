// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"strconv"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/strmangle"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("dbmodels: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type CardActionType string

// Enum values for CardActionType
const (
	CardActionTypeCreated   CardActionType = "created"
	CardActionTypeMoved     CardActionType = "moved"
	CardActionTypeUpdated   CardActionType = "updated"
	CardActionTypeCommented CardActionType = "commented"
)

func AllCardActionType() []CardActionType {
	return []CardActionType{
		CardActionTypeCreated,
		CardActionTypeMoved,
		CardActionTypeUpdated,
		CardActionTypeCommented,
	}
}

func (e CardActionType) IsValid() error {
	switch e {
	case CardActionTypeCreated, CardActionTypeMoved, CardActionTypeUpdated, CardActionTypeCommented:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CardActionType) String() string {
	return string(e)
}

func (e CardActionType) Ordinal() int {
	switch e {
	case CardActionTypeCreated:
		return 0
	case CardActionTypeMoved:
		return 1
	case CardActionTypeUpdated:
		return 2
	case CardActionTypeCommented:
		return 3

	default:
		panic(errors.New("enum is not valid"))
	}
}

type CardPriority string

// Enum values for CardPriority
const (
	CardPriorityLow    CardPriority = "low"
	CardPriorityMedium CardPriority = "medium"
	CardPriorityHigh   CardPriority = "high"
)

func AllCardPriority() []CardPriority {
	return []CardPriority{
		CardPriorityLow,
		CardPriorityMedium,
		CardPriorityHigh,
	}
}

func (e CardPriority) IsValid() error {
	switch e {
	case CardPriorityLow, CardPriorityMedium, CardPriorityHigh:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e CardPriority) String() string {
	return string(e)
}

func (e CardPriority) Ordinal() int {
	switch e {
	case CardPriorityLow:
		return 0
	case CardPriorityMedium:
		return 1
	case CardPriorityHigh:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}
