// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// PositionValidationLog is an object representing the database table.
type PositionValidationLog struct {
	ID                 string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	ListID             null.String `boil:"list_id" json:"list_id,omitempty" toml:"list_id" yaml:"list_id,omitempty"`
	BoardID            null.String `boil:"board_id" json:"board_id,omitempty" toml:"board_id" yaml:"board_id,omitempty"`
	ValidationType     string      `boil:"validation_type" json:"validation_type" toml:"validation_type" yaml:"validation_type"`
	TargetType         string      `boil:"target_type" json:"target_type" toml:"target_type" yaml:"target_type"`
	IsValid            bool        `boil:"is_valid" json:"is_valid" toml:"is_valid" yaml:"is_valid"`
	ErrorMessage       null.String `boil:"error_message" json:"error_message,omitempty" toml:"error_message" yaml:"error_message,omitempty"`
	ErrorDetails       null.JSON   `boil:"error_details" json:"error_details,omitempty" toml:"error_details" yaml:"error_details,omitempty"`
	RecordCount        null.Int    `boil:"record_count" json:"record_count,omitempty" toml:"record_count" yaml:"record_count,omitempty"`
	ProblematicRecords null.JSON   `boil:"problematic_records" json:"problematic_records,omitempty" toml:"problematic_records" yaml:"problematic_records,omitempty"`
	CheckedAt          null.Time   `boil:"checked_at" json:"checked_at,omitempty" toml:"checked_at" yaml:"checked_at,omitempty"`

	R *positionValidationLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L positionValidationLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PositionValidationLogColumns = struct {
	ID                 string
	ListID             string
	BoardID            string
	ValidationType     string
	TargetType         string
	IsValid            string
	ErrorMessage       string
	ErrorDetails       string
	RecordCount        string
	ProblematicRecords string
	CheckedAt          string
}{
	ID:                 "id",
	ListID:             "list_id",
	BoardID:            "board_id",
	ValidationType:     "validation_type",
	TargetType:         "target_type",
	IsValid:            "is_valid",
	ErrorMessage:       "error_message",
	ErrorDetails:       "error_details",
	RecordCount:        "record_count",
	ProblematicRecords: "problematic_records",
	CheckedAt:          "checked_at",
}

var PositionValidationLogTableColumns = struct {
	ID                 string
	ListID             string
	BoardID            string
	ValidationType     string
	TargetType         string
	IsValid            string
	ErrorMessage       string
	ErrorDetails       string
	RecordCount        string
	ProblematicRecords string
	CheckedAt          string
}{
	ID:                 "position_validation_log.id",
	ListID:             "position_validation_log.list_id",
	BoardID:            "position_validation_log.board_id",
	ValidationType:     "position_validation_log.validation_type",
	TargetType:         "position_validation_log.target_type",
	IsValid:            "position_validation_log.is_valid",
	ErrorMessage:       "position_validation_log.error_message",
	ErrorDetails:       "position_validation_log.error_details",
	RecordCount:        "position_validation_log.record_count",
	ProblematicRecords: "position_validation_log.problematic_records",
	CheckedAt:          "position_validation_log.checked_at",
}

// Generated where

var PositionValidationLogWhere = struct {
	ID                 whereHelperstring
	ListID             whereHelpernull_String
	BoardID            whereHelpernull_String
	ValidationType     whereHelperstring
	TargetType         whereHelperstring
	IsValid            whereHelperbool
	ErrorMessage       whereHelpernull_String
	ErrorDetails       whereHelpernull_JSON
	RecordCount        whereHelpernull_Int
	ProblematicRecords whereHelpernull_JSON
	CheckedAt          whereHelpernull_Time
}{
	ID:                 whereHelperstring{field: "\"position_validation_log\".\"id\""},
	ListID:             whereHelpernull_String{field: "\"position_validation_log\".\"list_id\""},
	BoardID:            whereHelpernull_String{field: "\"position_validation_log\".\"board_id\""},
	ValidationType:     whereHelperstring{field: "\"position_validation_log\".\"validation_type\""},
	TargetType:         whereHelperstring{field: "\"position_validation_log\".\"target_type\""},
	IsValid:            whereHelperbool{field: "\"position_validation_log\".\"is_valid\""},
	ErrorMessage:       whereHelpernull_String{field: "\"position_validation_log\".\"error_message\""},
	ErrorDetails:       whereHelpernull_JSON{field: "\"position_validation_log\".\"error_details\""},
	RecordCount:        whereHelpernull_Int{field: "\"position_validation_log\".\"record_count\""},
	ProblematicRecords: whereHelpernull_JSON{field: "\"position_validation_log\".\"problematic_records\""},
	CheckedAt:          whereHelpernull_Time{field: "\"position_validation_log\".\"checked_at\""},
}

// PositionValidationLogRels is where relationship names are stored.
var PositionValidationLogRels = struct {
	Board string
	List  string
}{
	Board: "Board",
	List:  "List",
}

// positionValidationLogR is where relationships are stored.
type positionValidationLogR struct {
	Board *Board `boil:"Board" json:"Board" toml:"Board" yaml:"Board"`
	List  *List  `boil:"List" json:"List" toml:"List" yaml:"List"`
}

// NewStruct creates a new relationship struct
func (*positionValidationLogR) NewStruct() *positionValidationLogR {
	return &positionValidationLogR{}
}

func (o *PositionValidationLog) GetBoard() *Board {
	if o == nil {
		return nil
	}

	return o.R.GetBoard()
}

func (r *positionValidationLogR) GetBoard() *Board {
	if r == nil {
		return nil
	}

	return r.Board
}

func (o *PositionValidationLog) GetList() *List {
	if o == nil {
		return nil
	}

	return o.R.GetList()
}

func (r *positionValidationLogR) GetList() *List {
	if r == nil {
		return nil
	}

	return r.List
}

// positionValidationLogL is where Load methods for each relationship are stored.
type positionValidationLogL struct{}

var (
	positionValidationLogAllColumns            = []string{"id", "list_id", "board_id", "validation_type", "target_type", "is_valid", "error_message", "error_details", "record_count", "problematic_records", "checked_at"}
	positionValidationLogColumnsWithoutDefault = []string{"validation_type", "is_valid"}
	positionValidationLogColumnsWithDefault    = []string{"id", "list_id", "board_id", "target_type", "error_message", "error_details", "record_count", "problematic_records", "checked_at"}
	positionValidationLogPrimaryKeyColumns     = []string{"id"}
	positionValidationLogGeneratedColumns      = []string{}
)

type (
	// PositionValidationLogSlice is an alias for a slice of pointers to PositionValidationLog.
	// This should almost always be used instead of []PositionValidationLog.
	PositionValidationLogSlice []*PositionValidationLog
	// PositionValidationLogHook is the signature for custom PositionValidationLog hook methods
	PositionValidationLogHook func(context.Context, boil.ContextExecutor, *PositionValidationLog) error

	positionValidationLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	positionValidationLogType                 = reflect.TypeOf(&PositionValidationLog{})
	positionValidationLogMapping              = queries.MakeStructMapping(positionValidationLogType)
	positionValidationLogPrimaryKeyMapping, _ = queries.BindMapping(positionValidationLogType, positionValidationLogMapping, positionValidationLogPrimaryKeyColumns)
	positionValidationLogInsertCacheMut       sync.RWMutex
	positionValidationLogInsertCache          = make(map[string]insertCache)
	positionValidationLogUpdateCacheMut       sync.RWMutex
	positionValidationLogUpdateCache          = make(map[string]updateCache)
	positionValidationLogUpsertCacheMut       sync.RWMutex
	positionValidationLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var positionValidationLogAfterSelectMu sync.Mutex
var positionValidationLogAfterSelectHooks []PositionValidationLogHook

var positionValidationLogBeforeInsertMu sync.Mutex
var positionValidationLogBeforeInsertHooks []PositionValidationLogHook
var positionValidationLogAfterInsertMu sync.Mutex
var positionValidationLogAfterInsertHooks []PositionValidationLogHook

var positionValidationLogBeforeUpdateMu sync.Mutex
var positionValidationLogBeforeUpdateHooks []PositionValidationLogHook
var positionValidationLogAfterUpdateMu sync.Mutex
var positionValidationLogAfterUpdateHooks []PositionValidationLogHook

var positionValidationLogBeforeDeleteMu sync.Mutex
var positionValidationLogBeforeDeleteHooks []PositionValidationLogHook
var positionValidationLogAfterDeleteMu sync.Mutex
var positionValidationLogAfterDeleteHooks []PositionValidationLogHook

var positionValidationLogBeforeUpsertMu sync.Mutex
var positionValidationLogBeforeUpsertHooks []PositionValidationLogHook
var positionValidationLogAfterUpsertMu sync.Mutex
var positionValidationLogAfterUpsertHooks []PositionValidationLogHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PositionValidationLog) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PositionValidationLog) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PositionValidationLog) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PositionValidationLog) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PositionValidationLog) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PositionValidationLog) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PositionValidationLog) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PositionValidationLog) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PositionValidationLog) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range positionValidationLogAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPositionValidationLogHook registers your hook function for all future operations.
func AddPositionValidationLogHook(hookPoint boil.HookPoint, positionValidationLogHook PositionValidationLogHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		positionValidationLogAfterSelectMu.Lock()
		positionValidationLogAfterSelectHooks = append(positionValidationLogAfterSelectHooks, positionValidationLogHook)
		positionValidationLogAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		positionValidationLogBeforeInsertMu.Lock()
		positionValidationLogBeforeInsertHooks = append(positionValidationLogBeforeInsertHooks, positionValidationLogHook)
		positionValidationLogBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		positionValidationLogAfterInsertMu.Lock()
		positionValidationLogAfterInsertHooks = append(positionValidationLogAfterInsertHooks, positionValidationLogHook)
		positionValidationLogAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		positionValidationLogBeforeUpdateMu.Lock()
		positionValidationLogBeforeUpdateHooks = append(positionValidationLogBeforeUpdateHooks, positionValidationLogHook)
		positionValidationLogBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		positionValidationLogAfterUpdateMu.Lock()
		positionValidationLogAfterUpdateHooks = append(positionValidationLogAfterUpdateHooks, positionValidationLogHook)
		positionValidationLogAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		positionValidationLogBeforeDeleteMu.Lock()
		positionValidationLogBeforeDeleteHooks = append(positionValidationLogBeforeDeleteHooks, positionValidationLogHook)
		positionValidationLogBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		positionValidationLogAfterDeleteMu.Lock()
		positionValidationLogAfterDeleteHooks = append(positionValidationLogAfterDeleteHooks, positionValidationLogHook)
		positionValidationLogAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		positionValidationLogBeforeUpsertMu.Lock()
		positionValidationLogBeforeUpsertHooks = append(positionValidationLogBeforeUpsertHooks, positionValidationLogHook)
		positionValidationLogBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		positionValidationLogAfterUpsertMu.Lock()
		positionValidationLogAfterUpsertHooks = append(positionValidationLogAfterUpsertHooks, positionValidationLogHook)
		positionValidationLogAfterUpsertMu.Unlock()
	}
}

// One returns a single positionValidationLog record from the query.
func (q positionValidationLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PositionValidationLog, error) {
	o := &PositionValidationLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for position_validation_log")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PositionValidationLog records from the query.
func (q positionValidationLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (PositionValidationLogSlice, error) {
	var o []*PositionValidationLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to PositionValidationLog slice")
	}

	if len(positionValidationLogAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PositionValidationLog records in the query.
func (q positionValidationLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count position_validation_log rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q positionValidationLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if position_validation_log exists")
	}

	return count > 0, nil
}

// Board pointed to by the foreign key.
func (o *PositionValidationLog) Board(mods ...qm.QueryMod) boardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BoardID),
	}

	queryMods = append(queryMods, mods...)

	return Boards(queryMods...)
}

// List pointed to by the foreign key.
func (o *PositionValidationLog) List(mods ...qm.QueryMod) listQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ListID),
	}

	queryMods = append(queryMods, mods...)

	return Lists(queryMods...)
}

// LoadBoard allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (positionValidationLogL) LoadBoard(ctx context.Context, e boil.ContextExecutor, singular bool, maybePositionValidationLog interface{}, mods queries.Applicator) error {
	var slice []*PositionValidationLog
	var object *PositionValidationLog

	if singular {
		var ok bool
		object, ok = maybePositionValidationLog.(*PositionValidationLog)
		if !ok {
			object = new(PositionValidationLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePositionValidationLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePositionValidationLog))
			}
		}
	} else {
		s, ok := maybePositionValidationLog.(*[]*PositionValidationLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePositionValidationLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePositionValidationLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &positionValidationLogR{}
		}
		if !queries.IsNil(object.BoardID) {
			args[object.BoardID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &positionValidationLogR{}
			}

			if !queries.IsNil(obj.BoardID) {
				args[obj.BoardID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`boards`),
		qm.WhereIn(`boards.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`boards.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Board")
	}

	var resultSlice []*Board
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Board")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for boards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for boards")
	}

	if len(boardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Board = foreign
		if foreign.R == nil {
			foreign.R = &boardR{}
		}
		foreign.R.PositionValidationLogs = append(foreign.R.PositionValidationLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BoardID, foreign.ID) {
				local.R.Board = foreign
				if foreign.R == nil {
					foreign.R = &boardR{}
				}
				foreign.R.PositionValidationLogs = append(foreign.R.PositionValidationLogs, local)
				break
			}
		}
	}

	return nil
}

// LoadList allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (positionValidationLogL) LoadList(ctx context.Context, e boil.ContextExecutor, singular bool, maybePositionValidationLog interface{}, mods queries.Applicator) error {
	var slice []*PositionValidationLog
	var object *PositionValidationLog

	if singular {
		var ok bool
		object, ok = maybePositionValidationLog.(*PositionValidationLog)
		if !ok {
			object = new(PositionValidationLog)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePositionValidationLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePositionValidationLog))
			}
		}
	} else {
		s, ok := maybePositionValidationLog.(*[]*PositionValidationLog)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePositionValidationLog)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePositionValidationLog))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &positionValidationLogR{}
		}
		if !queries.IsNil(object.ListID) {
			args[object.ListID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &positionValidationLogR{}
			}

			if !queries.IsNil(obj.ListID) {
				args[obj.ListID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`lists`),
		qm.WhereIn(`lists.id in ?`, argsSlice...),
		qmhelper.WhereIsNull(`lists.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load List")
	}

	var resultSlice []*List
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice List")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for lists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lists")
	}

	if len(listAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.List = foreign
		if foreign.R == nil {
			foreign.R = &listR{}
		}
		foreign.R.PositionValidationLogs = append(foreign.R.PositionValidationLogs, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ListID, foreign.ID) {
				local.R.List = foreign
				if foreign.R == nil {
					foreign.R = &listR{}
				}
				foreign.R.PositionValidationLogs = append(foreign.R.PositionValidationLogs, local)
				break
			}
		}
	}

	return nil
}

// SetBoard of the positionValidationLog to the related item.
// Sets o.R.Board to related.
// Adds o to related.R.PositionValidationLogs.
func (o *PositionValidationLog) SetBoard(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Board) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"position_validation_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"board_id"}),
		strmangle.WhereClause("\"", "\"", 2, positionValidationLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BoardID, related.ID)
	if o.R == nil {
		o.R = &positionValidationLogR{
			Board: related,
		}
	} else {
		o.R.Board = related
	}

	if related.R == nil {
		related.R = &boardR{
			PositionValidationLogs: PositionValidationLogSlice{o},
		}
	} else {
		related.R.PositionValidationLogs = append(related.R.PositionValidationLogs, o)
	}

	return nil
}

// RemoveBoard relationship.
// Sets o.R.Board to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PositionValidationLog) RemoveBoard(ctx context.Context, exec boil.ContextExecutor, related *Board) error {
	var err error

	queries.SetScanner(&o.BoardID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("board_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Board = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PositionValidationLogs {
		if queries.Equal(o.BoardID, ri.BoardID) {
			continue
		}

		ln := len(related.R.PositionValidationLogs)
		if ln > 1 && i < ln-1 {
			related.R.PositionValidationLogs[i] = related.R.PositionValidationLogs[ln-1]
		}
		related.R.PositionValidationLogs = related.R.PositionValidationLogs[:ln-1]
		break
	}
	return nil
}

// SetList of the positionValidationLog to the related item.
// Sets o.R.List to related.
// Adds o to related.R.PositionValidationLogs.
func (o *PositionValidationLog) SetList(ctx context.Context, exec boil.ContextExecutor, insert bool, related *List) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"position_validation_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"list_id"}),
		strmangle.WhereClause("\"", "\"", 2, positionValidationLogPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ListID, related.ID)
	if o.R == nil {
		o.R = &positionValidationLogR{
			List: related,
		}
	} else {
		o.R.List = related
	}

	if related.R == nil {
		related.R = &listR{
			PositionValidationLogs: PositionValidationLogSlice{o},
		}
	} else {
		related.R.PositionValidationLogs = append(related.R.PositionValidationLogs, o)
	}

	return nil
}

// RemoveList relationship.
// Sets o.R.List to nil.
// Removes o from all passed in related items' relationships struct.
func (o *PositionValidationLog) RemoveList(ctx context.Context, exec boil.ContextExecutor, related *List) error {
	var err error

	queries.SetScanner(&o.ListID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("list_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.List = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PositionValidationLogs {
		if queries.Equal(o.ListID, ri.ListID) {
			continue
		}

		ln := len(related.R.PositionValidationLogs)
		if ln > 1 && i < ln-1 {
			related.R.PositionValidationLogs[i] = related.R.PositionValidationLogs[ln-1]
		}
		related.R.PositionValidationLogs = related.R.PositionValidationLogs[:ln-1]
		break
	}
	return nil
}

// PositionValidationLogs retrieves all the records using an executor.
func PositionValidationLogs(mods ...qm.QueryMod) positionValidationLogQuery {
	mods = append(mods, qm.From("\"position_validation_log\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"position_validation_log\".*"})
	}

	return positionValidationLogQuery{q}
}

// FindPositionValidationLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPositionValidationLog(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*PositionValidationLog, error) {
	positionValidationLogObj := &PositionValidationLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"position_validation_log\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, positionValidationLogObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from position_validation_log")
	}

	if err = positionValidationLogObj.doAfterSelectHooks(ctx, exec); err != nil {
		return positionValidationLogObj, err
	}

	return positionValidationLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PositionValidationLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no position_validation_log provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(positionValidationLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	positionValidationLogInsertCacheMut.RLock()
	cache, cached := positionValidationLogInsertCache[key]
	positionValidationLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			positionValidationLogAllColumns,
			positionValidationLogColumnsWithDefault,
			positionValidationLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(positionValidationLogType, positionValidationLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(positionValidationLogType, positionValidationLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"position_validation_log\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"position_validation_log\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into position_validation_log")
	}

	if !cached {
		positionValidationLogInsertCacheMut.Lock()
		positionValidationLogInsertCache[key] = cache
		positionValidationLogInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PositionValidationLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PositionValidationLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	positionValidationLogUpdateCacheMut.RLock()
	cache, cached := positionValidationLogUpdateCache[key]
	positionValidationLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			positionValidationLogAllColumns,
			positionValidationLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update position_validation_log, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"position_validation_log\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, positionValidationLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(positionValidationLogType, positionValidationLogMapping, append(wl, positionValidationLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update position_validation_log row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for position_validation_log")
	}

	if !cached {
		positionValidationLogUpdateCacheMut.Lock()
		positionValidationLogUpdateCache[key] = cache
		positionValidationLogUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q positionValidationLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for position_validation_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for position_validation_log")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PositionValidationLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), positionValidationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"position_validation_log\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, positionValidationLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in positionValidationLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all positionValidationLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PositionValidationLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodels: no position_validation_log provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(positionValidationLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	positionValidationLogUpsertCacheMut.RLock()
	cache, cached := positionValidationLogUpsertCache[key]
	positionValidationLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			positionValidationLogAllColumns,
			positionValidationLogColumnsWithDefault,
			positionValidationLogColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			positionValidationLogAllColumns,
			positionValidationLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert position_validation_log, could not build update column list")
		}

		ret := strmangle.SetComplement(positionValidationLogAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(positionValidationLogPrimaryKeyColumns) == 0 {
				return errors.New("dbmodels: unable to upsert position_validation_log, could not build conflict column list")
			}

			conflict = make([]string, len(positionValidationLogPrimaryKeyColumns))
			copy(conflict, positionValidationLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"position_validation_log\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(positionValidationLogType, positionValidationLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(positionValidationLogType, positionValidationLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert position_validation_log")
	}

	if !cached {
		positionValidationLogUpsertCacheMut.Lock()
		positionValidationLogUpsertCache[key] = cache
		positionValidationLogUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PositionValidationLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PositionValidationLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no PositionValidationLog provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), positionValidationLogPrimaryKeyMapping)
	sql := "DELETE FROM \"position_validation_log\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from position_validation_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for position_validation_log")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q positionValidationLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no positionValidationLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from position_validation_log")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for position_validation_log")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PositionValidationLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(positionValidationLogBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), positionValidationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"position_validation_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, positionValidationLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from positionValidationLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for position_validation_log")
	}

	if len(positionValidationLogAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PositionValidationLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPositionValidationLog(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PositionValidationLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PositionValidationLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), positionValidationLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"position_validation_log\".* FROM \"position_validation_log\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, positionValidationLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in PositionValidationLogSlice")
	}

	*o = slice

	return nil
}

// PositionValidationLogExists checks if the PositionValidationLog row exists.
func PositionValidationLogExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"position_validation_log\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if position_validation_log exists")
	}

	return exists, nil
}

// Exists checks if the PositionValidationLog row exists.
func (o *PositionValidationLog) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PositionValidationLogExists(ctx, exec, o.ID)
}
